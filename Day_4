Day 4

24. 两两交换链表中的节点
https://leetcode.cn/problems/swap-nodes-in-pairs/


解题思路：

1. 画图
https://excalidraw.com/#json=ubA3F4HaZZK6gtfPGMbAj,hKdeSH6H1jf9S5EuFIo1jw
2. 链接交换
3. 保存节点


# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
        dummyHead = ListNode(next=head)
        cur = dummyHead

        while cur.next and cur.next.next:   #需要至少两个节点才能交换
            temp1 = cur.next                #记录断链的临时节点1
            temp2 = cur.next.next.next      #记录断链的练市节点2***


            cur.next = cur.next.next        #链接步骤1  cur.next
            cur.next.next = temp1           #链接步骤2  cur.next.next
            cur.next.next.next = temp2      #链接步骤3  cur.next.next.next

            cur = cur.next.next             #cur ++ 2, 相当于重新给cur赋值

        return dummyHead.next
        
        
19.删除链表的倒数第N个节点

https://leetcode.cn/problems/remove-nth-node-from-end-of-list/

解题思路：
1. 画图
2. 快慢指针模拟
3. 慢指针需要停留在删除节点前一位。
4. 快慢指针的间距 == 慢指针距离链表末尾的距离 == n+1
        
        
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        dummyHead = ListNode(next=head)
        slow, fast = dummyHead, dummyHead

        while n:
            fast = fast.next
            n -= 1

        fast = fast.next    #fast再提前走一步

        while fast:         #也可以写成while fast.next,省略上一步
            slow = slow.next
            fast = fast.next

        slow.next = slow.next.next
        return dummyHead.next
        
        
        
        
面试题 02.07. 链表相交

给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。

https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/

解题思路：
1.求出两个链表的长度 
2.求出两个链表长度的差值
3.通过移动长链表表头，让两个链表末尾对齐
4.比较curA和curB是否相同，如果不相同，同时向后移动curA和curB，如果遇到curA == curB，则找到交点。

根据解题思路的写法(容易理解版本)：
class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        pA, pB = headA, headB
        lenA, lenB = 0, 0

        # 计算链表的长度
        while pA:
            lenA += 1
            pA = pA.next
        while pB:
            lenB += 1
            pB = pB.next

        # 重新定位指针位置
        """
        重新定义 pA 和 pB 的目的是为了在重新定位指针位置时使用它们。
        在第一次遍历链表后，pA 和 pB 分别指向了链表的末尾节点。
        通过重新定义它们为 headA 和 headB，我们将它们重新指向链表的头部，以便进行第二次遍历。
        """
        pA, pB = headA, headB
        if lenA > lenB:
            for _ in range(lenA - lenB):
                pA = pA.next
        elif lenB > lenA:
            for _ in range(lenB - lenA):
                pB = pB.next

        # 同时移动指针比较节点是否相同
        while pA and pB:
            if pA == pB:
                return pA
            pA = pA.next
            pB = pB.next


#写法变种：
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        lenA, lenB = 0, 0               #初始化A,B长度
        cur = headA
        while cur:                      #测量链A长度
            cur = cur.next
            lenA += 1
        cur = headB
        while cur:                      #测量链B长度
            cur = cur.next
            lenB += 1

        curA, curB = headA, headB       

        if lenA > lenB:                 #以curB为最长链表的头，lenB为长度
            curA, curB = curB, curA
            lenA, lenB = lenB, lenA

        for _ in range(lenB-lenA):      #让curB先遍历至curA相同位置
            curB = curB.next

        while curB:
            if curB == curA:            #如果相同直接返回
                return curB
            else:                       #不同则继续遍历
                curA, curB = curA.next, curB.next
        return None                     #省略 return None 会使得函数在没有找到相交节点时不返回任何值。这可能与题目要求不符，因此最好在代码中明确写出 return None 来表示函数的返回值。这样可以提高代码的可读性和清晰性，使代码的意图更加明确。


#另一种简便写法：
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        if not headA or not headB:
            return None
        
        cur_A = headA
        cur_B = headB


        while cur_A != cur_B:
            cur_A = cur_A.next if cur_A else headB      #A链走完走B链
            cur_B =cur_B.next if cur_B else headA       #B链走完走A链

        return cur_B
        
        
        """
        pA = pA.next if pA else headB 和 pB = pB.next if pB else headA 是条件表达式，也称为三元表达式。它们的作用是在遍历链表时更新指针 pA 和 pB。

        pA = pA.next if pA else headB 表示如果 pA 不为 None，则将 pA 更新为下一个节点 pA.next；否则，即 pA 为 None，将 pA 更新为链表 headB 的头部节点。
        pB = pB.next if pB else headA 表示如果 pB 不为 None，则将 pB 更新为下一个节点 pB.next；否则，即 pB 为 None，将 pB 更新为链表 headA 的头部节点。
        这样的更新方式可以实现两个指针 pA 和 pB 的同步移动，同时遍历两个链表。当指针 pA 遍历完链表 A 后，它会接着遍历链表 B，而指针 pB 会在遍历完链表 B 后接着遍历链表 A。
        这样就能够平衡两个链表的长度差异，并在合适的时机进行节点比较，找到相交的节点或者判断两个链表不相交。

        总结起来，pA = pA.next if pA else headB 表示更新指针 pA，如果 pA 不为 None，则向后移动一个节点；否则，将 pA 更新为链表 headB 的头部节点。
        pB = pB.next if pB else headA 同理，表示更新指针 pB，如果 pB 不为 None，则向后移动一个节点；否则，将 pB 更新为链表 headA 的头部节点。
        """
        
        
        
        
        
142.环形链表II

https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html#%E8%A1%A5%E5%85%85


1.使用Floyd的乌龟和兔子算法来检测链表中是否有环。
2.如果有环，使用两个指针，一个从头开始，另一个从交点开始。
3.两个指针同时移动，直到相遇，这将是环的开始。

        
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow, fast = head, head
        while fast and fast.next:
            slow, fast = slow.next, fast.next.next          #检测链表中是否有环

            if slow == fast:                                #如果有环，从碰头点开始使用指针
                p, q = head, slow
                while p != q:
                    p, q = p.next, q.next
                return p                                    #相遇点为环的开始

        return None
        
        
        
class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        slow = head
        fast = head
        has_cycle = False
        
        # 判断链表是否有环
        while fast and fast.next:
        """
        while fast and fast.next 是一个条件判断语句，用于判断快指针 fast 和快指针的下一个节点 fast.next 是否都存在。

        fast 表示当前的快指针节点。
        fast.next 表示快指针的下一个节点。
        在这个条件判断语句中，while 循环会继续执行的前提是 fast 和 fast.next 都不为 None。如果其中任一指针为 None，则意味着已经到达了链表的末尾，无法再向后移动，因此循环结束。

        这个条件判断语句的作用是用来确定链表是否有环。快指针每次移动两步，而慢指针每次移动一步。如果链表中不存在环，那么快指针最终会先到达链表的末尾，即 fast 或 fast.next 会为 None，循环结束。如果链表中存在环，那么快指针和慢指针会在某个位置相遇，循环条件仍然为真，循环继续执行。

        因此，while fast and fast.next 的作用是判断快指针和快指针的下一个节点是否都存在，以确定链表是否有环，并在有环的情况下继续执行循环。
        """
        
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                has_cycle = True
                break
        
        # 如果链表没有环，则直接返回 None
        if not has_cycle:
            return None
        
        # 找到环的起始位置
        slow = head
        while slow != fast:
            slow = slow.next
            fast = fast.next
        
        return slow
                
