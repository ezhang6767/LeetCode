Day 4

24. 两两交换链表中的节点
https://leetcode.cn/problems/swap-nodes-in-pairs/


解题思路：

1. 画图
https://excalidraw.com/#json=ubA3F4HaZZK6gtfPGMbAj,hKdeSH6H1jf9S5EuFIo1jw
2. 链接交换
3. 保存节点


# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:
        dummyHead = ListNode(next=head)
        cur = dummyHead

        while cur.next and cur.next.next:   #需要至少两个节点才能交换
            temp1 = cur.next                #记录断链的临时节点1
            temp2 = cur.next.next.next      #记录断链的练市节点2***


            cur.next = cur.next.next        #链接步骤1  cur.next
            cur.next.next = temp1           #链接步骤2  cur.next.next
            cur.next.next.next = temp2      #链接步骤3  cur.next.next.next

            cur = cur.next.next             #cur ++ 2, 相当于重新给cur赋值

        return dummyHead.next
        
        
19.删除链表的倒数第N个节点

https://leetcode.cn/problems/remove-nth-node-from-end-of-list/

解题思路：
1. 画图
2. 快慢指针模拟
3. 慢指针需要停留在删除节点前一位。
4. 快慢指针的间距 == 慢指针距离链表末尾的距离 == n+1
        
        
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        dummyHead = ListNode(next=head)
        slow, fast = dummyHead, dummyHead

        while n:
            fast = fast.next
            n -= 1

        fast = fast.next    #fast再提前走一步

        while fast:         #也可以写成while fast.next,省略上一步
            slow = slow.next
            fast = fast.next

        slow.next = slow.next.next
        return dummyHead.next
        
        
        
        
面试题 02.07. 链表相交

给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。

https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/

解题思路：
1.求出两个链表的长度 
2.求出两个链表长度的差值
3.通过移动长链表表头，让两个链表末尾对齐
4.比较curA和curB是否相同，如果不相同，同时向后移动curA和curB，如果遇到curA == curB，则找到交点。


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        lenA, lenB = 0, 0               #初始化A,B长度
        cur = headA
        while cur:                      #测量链A长度
            cur = cur.next
            lenA += 1
        cur = headB
        while cur:                      #测量链B长度
            cur = cur.next
            lenB += 1

        curA, curB = headA, headB       

        if lenA > lenB:                 #以curB为最长链表的长度，lenB为长度
            curA, curB = curB, curA
            lenA, lenB = lenB, lenA

        for _ in range(lenB-lenA):      #让curB先遍历至curA相同位置
            curB = curB.next

        while curB:
            if curB == curA:            #如果相同直接返回
                return curB
            else:                       #不同则继续遍历
                curA, curB = curA.next, curB.next
        return None                     #写不写都能AC


#另一种简便写法：
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        if not headA or not headB:
            return None
        
        cur_A = headA
        cur_B = headB


        while cur_A != cur_B:
            cur_A = cur_A.next if cur_A else headB      #A链走完走B链
            cur_B =cur_B.next if cur_B else headA       #B链走完走A链

        return cur_B
        
142.环形链表II

https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html#%E8%A1%A5%E5%85%85


1.使用Floyd的乌龟和兔子算法来检测链表中是否有环。
2.如果有环，使用两个指针，一个从头开始，另一个从交点开始。
3.两个指针同时移动，直到相遇，这将是环的开始。

        
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow, fast = head, head
        while fast and fast.next:
            slow, fast = slow.next, fast.next.next          #检测链表中是否有环

            if slow == fast:                                #如果有环，从碰头点开始使用指针
                p, q = head, slow
                while p != q:
                    p, q = p.next, q.next
                return p                                    #相遇点为环的开始

        return None
                
