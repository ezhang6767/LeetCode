70. 爬楼梯改版

假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1, 2, 3, 4 或是 m 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 m, n 是一个正整数。


1. dp[i]: 爬到有i个台阶的楼顶，有dp[i]种方法

2. 确定递推公式
dp[i] 来自于 dp[i-1], dp[i-2], dp[i-3], dp[i-4] 等等， 即dp[i-j]
dp[i] += dp[i-j]

3. 由于dp[i] += dp[i-j]， dp[0]为递归的基础， 所以dp[0]不能为0
dp[0] = 1

4. 遍历顺序
由于1,2步和2,1步都是上三个台阶，但是是两种不同的方法，所以此题为求排列问题。
需要先遍历背包，再便遍历品。
即先遍历target,后遍历nums

5. 距离来推导dp数组

class Solution:
def climStairs(self, n: int) -> int:
    dp = [0] * (n+1)
    dp[0] = 1
    m = 2
    for j in range(n+1):
        for stemp in range(1, m+1):
            if j >= step:
                dp[j] += dp[j-step]
    return dp[n]
  
