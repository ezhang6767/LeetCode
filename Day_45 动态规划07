70. 爬楼梯改版

假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1, 2, 3, 4 或是 m 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 m, n 是一个正整数。


1. dp[i]: 爬到有i个台阶的楼顶，有dp[i]种方法

2. 确定递推公式
dp[i] 来自于 dp[i-1], dp[i-2], dp[i-3], dp[i-4] 等等， 即dp[i-j]
dp[i] += dp[i-j]

3. 由于dp[i] += dp[i-j]， dp[0]为递归的基础， 所以dp[0]不能为0
dp[0] = 1

4. 遍历顺序
由于1,2步和2,1步都是上三个台阶，但是是两种不同的方法，所以此题为求排列问题。
需要先遍历背包，再便遍历品。
即先遍历target,后遍历nums

5. 距离来推导dp数组

class Solution:
def climStairs(self, n: int) -> int:
    dp = [0] * (n+1)
    dp[0] = 1
    for j in range(n+1):
        for stemp in range(1, m+1):
            if j >= step:
                dp[j] += dp[j-step]
    return dp[n]
  
322. 零钱兑换
https://leetcode.cn/problems/coin-change/

先遍历物品 后遍历背包

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [float('inf')] * (amount + 1)  # 创建动态规划数组，初始值为正无穷大
        dp[0] = 0  # 初始化背包容量为0时的最小硬币数量为0

        for coin in coins:  # 遍历硬币列表，相当于遍历物品
            for i in range(coin, amount + 1):  # 遍历背包容量
                if dp[i - coin] != float('inf'):  # 如果dp[i - coin]不是初始值，则进行状态转移
                    dp[i] = min(dp[i - coin] + 1, dp[i])  # 更新最小硬币数量

        if dp[amount] == float('inf'):  # 如果最终背包容量的最小硬币数量仍为正无穷大，表示无解
            return -1
        return dp[amount]  # 返回背包容量为amount时的最小硬币数量

先遍历背包 后遍历物品

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [float('inf')] * (amount + 1)  # 创建动态规划数组，初始值为正无穷大
        dp[0] = 0  # 初始化背包容量为0时的最小硬币数量为0

        for i in range(1, amount + 1):  # 遍历背包容量
            for j in range(len(coins)):  # 遍历硬币列表，相当于遍历物品
                if i - coins[j] >= 0 and dp[i - coins[j]] != float('inf'):  # 如果dp[i - coins[j]]不是初始值，则进行状态转移
                    dp[i] = min(dp[i - coins[j]] + 1, dp[i])  # 更新最小硬币数量

        if dp[amount] == float('inf'):  # 如果最终背包容量的最小硬币数量仍为正无穷大，表示无解
            return -1
        return dp[amount]  # 返回背包容量为amount时的最小硬币数量

先遍历物品 后遍历背包（优化版）

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [float('inf')] * (amount + 1)
        dp[0] = 0

        for coin in coins:
            for i in range(coin, amount + 1): # 进行优化，从能装得下的背包开始计算，则不需要进行比较
                # 更新凑成金额 i 所需的最少硬币数量
                dp[i] = min(dp[i], dp[i - coin] + 1)

        return dp[amount] if dp[amount] != float('inf') else -1


先遍历背包 后遍历物品（优化版）

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [float('inf')] * (amount + 1)
        dp[0] = 0

        for i in range(1, amount + 1):  # 遍历背包容量
            for coin in coins:  # 遍历物品
                if i - coin >= 0:
                    # 更新凑成金额 i 所需的最少硬币数量
                    dp[i] = min(dp[i], dp[i - coin] + 1)

        return dp[amount] if dp[amount] != float('inf') else -1

https://leetcode.cn/problems/perfect-squares/description/


279. 完全平方数
Python：
先遍历物品, 再遍历背包

class Solution:
    def numSquares(self, n: int) -> int:
        dp = [float('inf')] * (n + 1)
        dp[0] = 0

        for i in range(1, n + 1):  # 遍历背包
            for j in range(1, int(i ** 0.5) + 1):  # 遍历物品
                # 更新凑成数字 i 所需的最少完全平方数数量
                dp[i] = min(dp[i], dp[i - j * j] + 1)

        return dp[n]

先遍历背包, 再遍历物品

class Solution:
    def numSquares(self, n: int) -> int:
        dp = [float('inf')] * (n + 1)
        dp[0] = 0

        for i in range(1, int(n ** 0.5) + 1):  # 遍历物品
            for j in range(i * i, n + 1):  # 遍历背包
                # 更新凑成数字 j 所需的最少完全平方数数量
                dp[j] = min(dp[j - i * i] + 1, dp[j])

        return dp[n]


其他版本

class Solution:
    def numSquares(self, n: int) -> int:
        # 创建动态规划数组，初始值为最大值
        dp = [float('inf')] * (n + 1)
        # 初始化已知情况
        dp[0] = 0

        # 遍历背包容量
        for i in range(1, n + 1):
            # 遍历完全平方数作为物品
            j = 1
            while j * j <= i:
                # 更新最少完全平方数的数量
                dp[i] = min(dp[i], dp[i - j * j] + 1)
                j += 1

        # 返回结果
        return dp[n]
















