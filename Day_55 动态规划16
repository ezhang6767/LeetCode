583. 两个字符串的删除操作
https://leetcode.cn/problems/delete-operation-for-two-strings/description/
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        #1. dp[i][j]:以i-1,j-1结尾的word1,word2的最小删除步数
        #2. 递推公式:1. if word1[i-1]==word2[j-1], dp[i][j] = dp[i-1][j-1]
        #           2. if word1[i-1]!=word2[j-2], dp[i][j] = dp[i-1][j]+1, dp[i][j-1]+1, dp[i-1][j-1]+2的最小值
        #3. 初始化：dp[i][0] = i, dp[0][j] = j
        #4. 遍历顺序从上到下从左到右
        #5. 打印dp数组

        dp = [[0]* (len(word2)+1) for _ in range(len(word1)+1)]

        for i in range(len(word1)+1):
            dp[i][0] = i
        
        for j in range(len(word2)+1):
            dp[0][j] = j

        for i in range(1, len(word1)+1):
            for j in range(1, len(word2)+1):
                if word1[i-1] == word2[j-1]:
                    dp[i][j] = dp[i-1][j-1]
                else:
                    dp[i][j] = min(dp[i-1][j]+1, dp[i][j-1]+1, dp[i-1][j-1]+2)
        return dp[-1][-1]

72. 编辑距离 
https://leetcode.cn/problems/edit-distance/description/

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        #1. dp[i][j] 以i-1， j-1结尾的word1，word2转换使用的最小操作数
        #2. if word1[i-1] == word2[j-1], dp[i][j] = dp[i-1][j-1]
        #   if word1[i-1] != word2[j-1], dp[i][j] = dp[i-1][j] + 1, dp[i][j-1] + 1. dp[i-1][j-1] + 1 的最小值
        #3. 初始化dp[i][0] = i, dp[0][j] = 0
        #4. 遍历顺序，先左后右，先上后下
        #5. 打印dp数组

        dp = [[0]* (len(word2)+1) for _ in range(len(word1)+1)]

        for i in range(len(word1)+1):
            dp[i][0] = i

        for j in range(len(word2)+1):
            dp[0][j] = j

        for i in range(1, len(word1)+1):
            for j in range(1, len(word2)+1):
                if word1[i-1] == word2[j-1]:
                    dp[i][j] = dp[i-1][j-1]

                else:
                    dp[i][j] = min(dp[i-1][j]+1, dp[i][j-1]+1, dp[i-1][j-1]+1)
        
        return dp[-1][-1]
