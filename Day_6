6 第三章 哈希表

哈希表理论基础：

当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法。

但是哈希法也是牺牲了空间换取了时间，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。

如果在做面试题目的时候遇到需要判断一个元素是否出现过的场景也应该第一时间想到哈希法。


写法一（哈希表）：

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        record = [0] * 26
        for i in s:
            record[ord(i) - ord('a')] += 1      #并不需要记住字符a的ASCII，只要求出一个相对数值就可以了

        for i in t:
            record[ord(i) - ord('a')] -= 1

        for i in range(26):                     #record数组如果有的元素不为零0，说明字符串s和t 一定是谁多了字符或者谁少了字符。
            if record[i] != 0:
                return False

        return True
        

写法二（defaultdict）:

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
    
        s_dict, t_dict = collections.defaultdict(int), collections.defaultdict(int)

        for i in s:
            s_dict[i] += 1

        for i in t:
            t_dict[i] += 1

        return s_dict == t_dict
        
写法三（Counter）：
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:

        s_count, t_count = collections.Counter(s), collections.Counter(t)   #使用Counter更方便
              
        #print(s_count,t_count)
        #s = "anagram", t = "nagaram"
        #Counter({'a': 3, 'n': 1, 'g': 1, 'r': 1, 'm': 1}) Counter({'a': 3, 'n': 1, 'g': 1, 'r': 1, 'm': 1})
        
        return s_count == t_count
