309. 买卖股票的最佳时机含冷冻期
https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/description/


#持有状态需要区分为：
#0.持有状态（当天买入，或者之前买入）
#1.保持卖出状态（2天前已经卖出，冷冻期已过。或者前一天已经卖出股票，一直没有操作）
#2.今天卖出股票
#3.冷冻期，只持续1天
#因为多了一个状态冷冻期，需要将卖出股票状态区分为，当天卖出和保持卖出状态。

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0

        
        dp = [[0] * 4 for _ in range(len(prices))]
        dp[0][0] = -prices[0]

        for i in range(1,len(prices)):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1]-prices[i], dp[i-1][3]-prices[i])    
# 当前持有股票的最大利润等于:1.前一天持有股票的最大利润, 2.前一天不持有股票且不处于冷冻期的最大利润减去当前股票的价格, 3.前一天是冷冻期的最大利润减去当前股票的价格
            dp[i][1] = max(dp[i-1][1], dp[i-1][3])
            dp[i][2] = dp[i-1][0]+prices[i]
            dp[i][3] = dp[i-1][2]

        return max(dp[-1][1], dp[-1][2], dp[-1][3])


#不持有股票状态分成冷冻期和非冷冻期2种状态
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        if n < 2:
            return 0

        # 定义三种状态的动态规划数组
        dp = [[0] * 3 for _ in range(n)]
        dp[0][0] = -prices[0]  # 持有股票的最大利润
        dp[0][1] = 0           # 不持有股票，且处于冷冻期的最大利润
        dp[0][2] = 0           # 不持有股票，不处于冷冻期的最大利润

        for i in range(1, n):
            # 当前持有股票的最大利润等于前一天持有股票的最大利润或者前一天不持有股票且不处于冷冻期的最大利润减去当前股票的价格
            dp[i][0] = max(dp[i-1][0], dp[i-1][2] - prices[i])
            # 当前不持有股票且处于冷冻期的最大利润等于前一天持有股票的最大利润加上当前股票的价格
            dp[i][1] = dp[i-1][0] + prices[i]
            # 当前不持有股票且不处于冷冻期的最大利润等于前一天不持有股票的最大利润或者前一天处于冷冻期的最大利润
            dp[i][2] = max(dp[i-1][2], dp[i-1][1])

        # 返回最后一天不持有股票的最大利润
        return max(dp[-1][1], dp[-1][2])


714. 买卖股票的最佳时机含手续费
https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/

class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        dp = [[0] * 2 for _ in range(len(prices))] 

        if not prices:
            return 0


        dp[0][0] = -prices[0]
        dp[0][1] = 0                #可以理解为第0天卖是-fee, 第0天不卖是0，取最大值为0.

        for i in range(1,len(prices)):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1]-prices[i])
            dp[i][1] = max(dp[i-1][1], dp[i-1][0]+prices[i]-fee)

        return max(dp[-1][0], dp[-1][1])
