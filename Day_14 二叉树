第六章 二叉树 Part 01

递归遍历(必须掌握)

144.二叉树的前序遍历
https://leetcode.cn/problems/binary-tree-preorder-traversal/

#类方法：将前序遍历的逻辑放在了一个类方法 preorderTraversal 中。方法接收根节点作为参数，并通过递归调用实现了前序遍历。
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []
        middle = root.val   # 显式列出中节点的遍历
        left = self.preorderTraversal(root.left)
        right = self.preorderTraversal(root.right)

        return [middle] + left +right
       # return [root.val] + left +right  #非显示中节点遍历
       
#嵌套函数法：将前序遍历的逻辑放在了一个嵌套函数 traversal 中。嵌套函数接收根节点作为参数，
#并通过递归调用实现了前序遍历。然后，在外部定义的 preorderTraversal 方法中调用了嵌套函数来执行遍历，并返回结果。
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        result = []

        def traversal(root: TreeNode):
            if root == None:
                return
            
            result.append(root.val)
            traversal(root.left)
            traversal(root.right)
        
        traversal(root)
        return result

#从代码结构上看，第一种写法更加简洁，将前序遍历的逻辑直接封装在类方法中。而第二种写法使用了嵌套函数，将遍历逻辑封装在嵌套函数中，然后在外部定义的方法中调用嵌套函数。

#迭代法前序遍历（栈遍历法）：

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []  # 根结点为空则返回空列表

        stack = [root]  # 使用栈来辅助迭代遍历
        result = []  # 用于存储遍历结果的列表

        while stack:
            node = stack.pop()  # 弹出栈顶节点，即当前要处理的节点

            result.append(node.val)  # 将当前节点的值添加到结果列表中，前序遍历的特点

            if node.right:  # 如果当前节点存在右孩子，则将右孩子入栈，以便后续处理
                stack.append(node.right)

            if node.left:  # 如果当前节点存在左孩子，则将左孩子入栈，以便后续处理
                stack.append(node.left)

        return result  # 返回前序遍历的结果列表

Q: 为什么以上解法中，stack = [root] 而不是 [root.val]？
A:
在给定的解法中，stack存储的是节点对象（TreeNode），而不仅仅是节点的值（root.val）。这是因为在遍历过程中，我们需要访问节点的其他属性，例如左孩子和右孩子。

将节点对象存储在栈中，而不仅仅是节点的值，可以在遍历过程中更方便地访问节点的其他属性。这样，我们可以使用节点对象的left和right属性来获取左孩子和右孩子，并将它们入栈进行后续处理。

如果只存储节点的值，例如stack = [root.val]，我们将失去访问节点其他属性的能力，无法得知节点的左孩子和右孩子。这将导致无法正确遍历整个二叉树。

因此，在该解法中，为了保留节点的所有属性，我们将节点对象（TreeNode）存储在栈中，而不仅仅是节点的值。这样可以确保在遍历过程中能够正确处理左孩子和右孩子。

Q: 为什么该解法里 result.append(node.val)而不是node?
A:
在给定的解法中，result.append(node.val)将节点的值（node.val）添加到结果列表result中，而不是直接将节点对象（node）添加到结果列表。

这是因为在前序遍历中，我们只需要访问节点的值的顺序，而不需要访问节点对象本身。通过将节点的值添加到结果列表，我们可以按照前序遍历的顺序记录遍历结果。

将节点对象添加到结果列表中可能会导致存储更多的信息，包括节点的左孩子、右孩子等，但这并不符合前序遍历的要求。

因此，在该解法中，我们只将节点的值（node.val）添加到结果列表result中，以得到正确的前序遍历结果。

#前序遍历迭代标记法
class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        result = []  # 存储前序遍历的结果
        stack = []  # 辅助栈用于迭代遍历
        if root:
            stack.append(root)  # 如果根节点不为空，则将根节点入栈

        while stack:
            node = stack.pop()  # 弹出栈顶的节点

            if node:  # 如果节点不为空，说明是中间节点
                if node.right:
                    stack.append(node.right)  # 右孩子先入栈，因为前序遍历的顺序是中-左-右
                if node.left:
                    stack.append(node.left)  # 左孩子后入栈，保证下次处理的是左子树
                stack.append(node)  # 将当前节点再次入栈，标记为中间节点
                stack.append(None)  # 在当前节点之后加入一个空节点作为标记
            else:
                node = stack.pop()  # 弹出空节点后，栈顶就是之前入栈的中间节点
                result.append(node.val)  # 将中间节点的值添加到结果列表中

        return result  # 返回前序遍历的结果列表



145.二叉树的后序遍历
https://leetcode.cn/problems/binary-tree-postorder-traversal/

#类方法
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []
        #result = []
        left = self.postorderTraversal(root.left)
        right = self.postorderTraversal(root.right)
        #middle = root.val                #也可以显示中节点遍历

        return left + right + [root.val]
        
#嵌套函数法        
class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        result = []
        def traversal(root: TreeNode):
            if not root:
                return

            traversal(root.left)    # 递归遍历左子树
            traversal(root.right)   # 递归遍历右子树
            result.append(root.val)  # 将当前节点的值添加到结果列表

        traversal(root)  # 调用嵌套函数进行后序遍历
        return result    # 返回遍历结果列表

详细分析：

这段代码实现了二叉树的后序遍历。下面对代码的执行过程进行分析：

首先，在外部定义的 postorderTraversal 方法中创建一个空的列表 result，用于存储遍历结果。

然后，定义了一个嵌套函数 traversal，用于递归遍历二叉树的节点。

traversal 函数接收一个参数 root，表示当前要遍历的二叉树的根节点。

如果根节点为空，即二叉树为空，直接返回。

如果根节点不为空，则先递归调用 traversal 函数遍历左子树，再递归调用 traversal 函数遍历右子树。

最后，将当前节点的值 root.val 添加到结果列表 result 中。这是后序遍历的特点，先遍历左子树，再遍历右子树，最后访问根节点。

在 postorderTraversal 方法中调用 traversal 函数，并传入根节点 root，开始执行后序遍历。

最后，返回遍历结果列表 result。

总结起来，这段代码通过使用嵌套函数 traversal 实现了二叉树的后序遍历。在遍历过程中，先递归遍历左子树，再递归遍历右子树，

最后将根节点的值添加到结果列表中。这样就实现了后序遍历的顺序：左子树 -> 右子树 -> 根节点。   

#迭代法后序遍历（栈遍历法）：

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []

        stack = [root]
        result = []

        while stack:                #从中左右变为中右左然后翻转为左右中
            node = stack.pop()
            result.append(node.val)

            if node.left:
                stack.append(node.left)
            
            if node.right:
                stack.append(node.right)

        return result[::-1]          # 将最终的数组翻转


94.二叉树的中序遍历
https://leetcode.cn/problems/binary-tree-inorder-traversal/

#类方法
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []

        left = self.inorderTraversal(root.left)
        middle = root.val
        right = self.inorderTraversal(root.right)

        return left + [middle] + right
        
#嵌套函数法
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        result = []
        def traversal(root: TreeNode):
            if not root:
                return []
            traversal(root.left)
            result.append(root.val)
            traversal(root.right)

        traversal(root)
        return result
        
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
        
        
#迭代法中序遍历(指针遍历法)：
class Solution:
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []  # 根结点为空则返回空列表

        stack = []  # 用于存储待处理的节点的栈,不能提前将root结点加入stack中
        result = []  # 用于存储中序遍历的结果列表
        cur = root  # 当前节点指针，从根节点开始

        while cur or stack:
            if cur:
                stack.append(cur)  # 将当前节点入栈
                cur = cur.left  # 处理左子树
            else:
                cur = stack.pop()  # 当前节点为空，说明左子树已经处理完毕，从栈中弹出节点
                result.append(cur.val)  # 将节点值添加到结果列表中
                cur = cur.right  # 处理右子树

        return result  # 返回中序遍历的结果列表
        
在这个解法中，我们使用了栈来模拟递归的过程，实现了迭代法的中序遍历。首先，我们判断根节点root是否为空，如果为空，则直接返回一个空列表，因为没有节点可遍历。

然后，我们初始化一个栈stack，用于存储待处理的节点。同时，我们创建一个空列表result，用于存储中序遍历的结果。

我们还定义了一个指针cur，初始时指向根节点root，从根节点开始遍历。

接下来，我们进入一个循环，只要当前节点cur不为空或栈stack不为空，就一直进行迭代。

在每次迭代中，我们首先检查当前节点cur是否存在。如果存在，说明我们还可以继续处理左子树。我们将当前节点cur入栈，并将指针cur指向其左子节点，以便处理左子树。

如果当前节点cur为空，说明左子树已经处理完毕，我们从栈中弹出栈顶节点，即上一层的父节点。然后，我们将弹出节点的值cur.val添加到结果列表result中，完成中序遍历中的处理顺序。

接着，我们将指针cur指向弹出节点的右子节点，以便处理右子树。如果右子树存在，则在下一次迭代中会处理右子树。

重复以上步骤，直到栈为空且当前节点为空，即遍历完整个二叉树。

最后，我们返回结果列表result，其中存储了中序遍历的结果。

这种迭代法遍历二叉树的时间复杂度是O(n)，其中n是二叉树中的节点数。    









