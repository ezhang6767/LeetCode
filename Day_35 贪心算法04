860. 柠檬水找零
https://leetcode.cn/problems/lemonade-change/description/

class Solution:
    def lemonadeChange(self, bills: List[int]) -> bool:
        five = 0
        ten = 0
        twenty = 0
        
        for bill in bills:
            # 情况一：收到5美元
            if bill == 5:
                five += 1
            
            # 情况二：收到10美元
            if bill == 10:
                if five <= 0:
                    return False
                ten += 1
                five -= 1
            
            # 情况三：收到20美元
            if bill == 20:
                # 先尝试使用10美元和5美元找零
                if five > 0 and ten > 0:
                    five -= 1
                    ten -= 1
                    #twenty += 1
                # 如果无法使用10美元找零，则尝试使用三张5美元找零
                elif five >= 3:
                    five -= 3
                    #twenty += 1
                else:
                    return False
        
        return True


406. 根据身高重建队列
https://leetcode.cn/problems/queue-reconstruction-by-height/

#贪心/lambda
class Solution:
    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:
        # 先按照h维度的身高顺序从高到低排序。确定第一个维度
        # lambda返回的是一个元组：当-x[0](维度h）相同时，再根据x[1]（维度k）从小到大排序
        people.sort(key=lambda x: (-x[0], x[1]))
        que = []

        # 根据每个元素的第二个维度k，贪心算法，进行插入
        # people已经排序过了：同一高度时k值小的排前面。
        for p in people:
            # 使用insert函数将当前人的信息p插入到que列表的位置p[1]上
            # 因为people列表已经按照身高从高到低排序，同一身高的人按照前面的人数从小到大排序
            # 插入操作保证了当前人的前面有k个身高大于等于自己的人
            que.insert(p[1], p)
        
        # 返回最终构建的队列que，即为根据身高和前面的人数信息重新构建的队列
        return que


#贪心/不使用lambda
class Solution:
    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:
        # 定义排序函数，直接通过元组比较来实现排序
        def custom_sort(p):
            return (-p[0], p[1])
        
        # 使用定义的排序函数进行排序
        people.sort(key=custom_sort)
        que = []

        # 根据每个元素的第二个维度k，贪心算法，进行插入
        # people已经排序过了：同一高度时k值小的排前面。
        for p in people:
            que.insert(p[1], p)
        
        # 返回最终构建的队列que，即为根据身高和前面的人数信息重新构建的队列
        return que

452. 用最少数量的箭引爆气球  

#贪心算法
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        if len(points) == 0: return 0
        points.sort(key=lambda x: x[0])
        result = 1
        for i in range(1, len(points)):        #range(len(points))也能AC因为条件是大于
            if points[i][0] > points[i - 1][1]: # 气球i和气球i-1不挨着，注意这里不是>=
                result += 1     
            else:
                points[i][1] = min(points[i - 1][1], points[i][1]) # 更新重叠气球最小右边界
        return result

# 不改变原数组
class Solution: 
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        points.sort(key = lambda x: x[0])
        sl,sr = points[0][0],points[0][1]
        count = 1
        for i in points:
            if i[0]>sr:
                count+=1
                sl,sr = i[0],i[1]
            else:
                sl = max(sl,i[0])
                sr = min(sr,i[1])
        return count

 # 不改变原数组改写
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        points.sort(key = lambda x: x[0])
        sl,sr = points[0][0],points[0][1]
        count = 1
        for i in range(len(points)):
            if points[i][0]>sr:
                count+=1
                sl,sr = points[i][0],points[i][1]
            else:
                sl = max(sl,points[i][0])
                sr = min(sr,points[i][1])
        return count
