503. 下一个更大元素 II

https://leetcode.cn/problems/next-greater-element-ii/description/

#1. 将遍历范围*2
#2. i取模后映射
#3. 初始化答案数组为-1
#4. 单调栈递增
#5. 代码里只计算弹出，即遍历数组大于栈口答案
#6. 栈里存下标
#7. 下面为基本模板

class Solution:
    def nextGreaterElements(self, nums: List[int]) -> List[int]:
        result = [-1] * len(nums)
        stack = []
        for i in range(len(nums)*2):
            while len(stack) != 0 and nums[i%len(nums)] > nums[stack[-1]]:
                result[stack[-1]] = nums[i%len(nums)]
                stack.pop()
            stack.append(i%len(nums))
        return result
42. 接雨水
https://leetcode.cn/problems/trapping-rain-water/description/

class Solution:
    def trap(self, height: List[int]) -> int:
        stack = [0]
        result = 0
        for i in range(len(height)):
            #情况1 遍历元素小于栈口
            if height[i] < height[stack[-1]]:
                stack.append(i)

            #情况2 遍历元素等于栈口
            elif height[i] == height[stack[-1]]:
                stack.append(i)

            #情况3 遍历元素大于栈口
            else:
                while stack and height[i] > height[stack[-1]]:
                    mid = height[stack[-1]]
                    stack.pop()
                    if stack:
                        right = height[i]
                        left = height[stack[-1]]
                        h = min(right,left)-mid
                        wide = i-stack[-1]-1
                        result += wide*h                    
                stack.append(i)
        return result
                    
                    
#精简版
class Solution:
    def trap(self, height: List[int]) -> int:
        stack = [0]
        result = 0

        for i in range(1,len(height)):
            while stack and height[i] > height[stack[-1]]:
                mid = height[stack[-1]]
                stack.pop()
                if stack:
                    h = min(height[stack[-1]], height[i]) - mid
                    w = i-stack[-1]-1
                    result += w*h
            stack.append(i)
        return result
