110.平衡二叉树 （优先掌握递归）
https://leetcode.cn/problems/balanced-binary-tree/

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isBalanced(self, root: TreeNode) -> bool:
        if self.get_height(root) != -1:
            return True
        else:
            return False

    def get_height(self, root: TreeNode) -> int:
        # Base Case
        if not root:
            return 0
        # 左
        if (left_height := self.get_height(root.left)) == -1:
            return -1
        # 右
        if (right_height := self.get_height(root.right)) == -1:
            return -1
        # 中
        if abs(left_height - right_height) > 1:
            return -1
        else:
            return 1 + max(left_height, right_height)


海象操作符 := walrus operator

相当于：
        left_height = self.get_height(root.left)
        if left_height == -1:
           return -1

使用细节：

在这两个条件语句中，使用了不同的括号位置，从而导致了不同的结果。

if (left_height := self.get_height(root.left)) == -1:：

在这个条件语句中，使用了括号将赋值表达式 (left_height := self.get_height(root.left)) 括起来。
这意味着先执行赋值操作 (left_height := self.get_height(root.left))，将 self.get_height(root.left) 的结果赋值给 left_height。
然后，比较 left_height 和 -1 的值是否相等。
如果相等，执行相应的操作。

if left_height := self.get_height(root.left) == -1:：

在这个条件语句中，没有使用括号。
根据Python的运算符优先级，比较操作符 == 的优先级高于赋值操作符 :=。
因此，先执行比较操作 self.get_height(root.left) == -1，得到一个布尔值。
然后，将这个布尔值赋值给 left_height。
最后，根据 left_height 的值执行相应的操作。
因此，这两种写法的区别在于赋值操作和比较操作的先后顺序。
第一种写法先进行赋值，再进行比较；
第二种写法先进行比较，再进行赋值。这可能会导致不同的结果。


257. 二叉树的所有路径

https://leetcode.cn/problems/binary-tree-paths/

递归法+回溯
class Solution:
    def traversal(self, cur, path, result):
        path.append(cur.val)  # 将当前节点的值添加到路径中（中）
        if not cur.left and not cur.right:  # 到达叶子节点
            sPath = '->'.join(map(str, path))  # 将路径中的节点值转换为字符串，并用 '->' 连接起来
            result.append(sPath)  # 将完整的路径添加到结果列表中
            return
        if cur.left:  # 处理左子节点（左）
            self.traversal(cur.left, path, result)  # 递归调用，传入左子节点和当前路径
            path.pop()  # 回溯，移除已经处理完的左子节点
        if cur.right:  # 处理右子节点（右）
            self.traversal(cur.right, path, result)  # 递归调用，传入右子节点和当前路径
            path.pop()  # 回溯，移除已经处理完的右子节点

    def binaryTreePaths(self, root):
        result = []  # 存储最终结果的列表
        path = []  # 当前路径的列表
        if not root:
            return result
        self.traversal(root, path, result)  # 从根节点开始进行递归遍历
        return result  # 返回结果列表

#隐形回溯：
https://programmercarl.com/0257.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84.html#python


404.左叶子之和
https://leetcode.cn/problems/sum-of-left-leaves/

class Solution:
    def sumOfLeftLeaves(self, root):
        if root is None:
            return 0
        
        # 当前节点是叶子节点的情况
        if root.left is None and root.right is None:
            return 0
        
        # 递归处理左子树
        leftValue = self.sumOfLeftLeaves(root.left)  # 左

        # 判断左子树是否是左叶子节点
        if root.left and not root.left.left and not root.left.right:
            leftValue = root.left.val
            
        # 递归处理右子树
        rightValue = self.sumOfLeftLeaves(root.right)  # 右

        # 当前节点的值与左右子树的和相加
        sum_val = leftValue + rightValue  # 中
        
        return sum_val

首先，进行了三个条件判断：

if root is None:：如果根节点为空，返回 0，表示没有左叶子节点。

if root.left is None and root.right is None:：如果根节点没有左子树和右子树，返回 0，表示没有左叶子节点。

然后，进行递归处理左子树和右子树。

leftValue = self.sumOfLeftLeaves(root.left)：递归调用 sumOfLeftLeaves 函数处理左子树，得到左子树中左叶子节点的和（左子树的递归结果）。

rightValue = self.sumOfLeftLeaves(root.right)：递归调用 sumOfLeftLeaves 函数处理右子树，得到右子树中左叶子节点的和（右子树的递归结果）。

接下来，判断当前节点的左子树是否是左叶子节点：

if root.left and not root.left.left and not root.left.right:：如果当前节点有左子树，并且左子树没有左子树和右子树，即左子树是左叶子节点。

leftValue = root.left.val：将当前节点的左子树的值赋给 leftValue，表示左子树是左叶子节点。
最后，将左子树的和 leftValue、右子树的和 rightValue，以及当前节点的值相加，得到左叶子节点的总和 sum_val。

最后，返回左叶子节点的总和 sum_val。

这种解法通过递归遍历二叉树的每个节点，判断节点是否是左叶子节点，并累加左叶子节点的值，从而得到左叶子节点的总和。
