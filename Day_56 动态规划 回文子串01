647. 回文子串 
https://leetcode.cn/problems/palindromic-substrings/submissions/
class Solution:
    def countSubstrings(self, s: str) -> int:
        #1. dp[i][j] 表示区间范围[i,j]的子串是否为回文子串
        #2. 递推公式：s[i] != s[j], dp[i][j] = False
        #           s[i] == s[j], 分以下三种情况：
        #           1. i==j, i.e. "a", True
        #           2. j = i + 1, i.e. "aa", True
        #           3. j > i + 1, i.e. "abga", 需要判断dp[i+1][j-1]是否是回文子串
        #3. dp数组初始化：False
        #4. 遍历顺序，从左到右(j从小到大遍历)，从下到上(i从大到小), j>=i
        #5. 打印dp数组

        dp = [[False] * len(s) for _ in range(len(s))]
        result = 0
        for i in range(len(s)-1, -1, -1):
            for j in range(i, len(s)):
                if s[i]==s[j] and (i == j or i == j-1 or dp[i+1][j-1]==True):
                    result += 1
                    dp[i][j] = True

        return result


516.最长回文子序列
https://leetcode.cn/problems/longest-palindromic-subsequence/

class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        #1. dp[i][j] 字符串s在[i][j]范围内最长的回文子序列长度为dp[i][j]
        #2. 递推公式: 1. s[i] == s[j], dp[i][j] = dp[i+1][j-1]+2
                # 2. s[i] != s[j], dp[i][j] = max(dp[i+1][j], dp[i][j-1])
        #3. 初始化，i == j时，dp[i][j] == 1
        #           else: dp[i][j] = 0
        #4. 遍历顺序，从下到上，从左到右，先i后j因为j需要大于i（等于的时候已经初始化了）
        #5. 打印dp数组

        dp = [[0] * len(s) for _ in range(len(s))]

        for i in range(len(s)):
            dp[i][i] = 1

        for i in range(len(s)-1, -1, -1):
            for j in range(i+1, len(s)):
                if s[i] == s[j]:
                    dp[i][j] = dp[i+1][j-1]+2

                else:
                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])
        
        return dp[0][-1]
        
