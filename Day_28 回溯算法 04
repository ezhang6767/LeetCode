93.复原IP地址  
https://leetcode.cn/problems/restore-ip-addresses/

class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        result = []
        self.backtracking(s, 0, 0, "", result)  # 调用回溯函数进行IP地址恢复
        return result

    def backtracking(self, s, start_index, point_num, current, result):
        if point_num == 3:  # 逗点数量为3时，分隔结束
            if self.is_valid(s, start_index, len(s) - 1):  # 判断第四段子字符串是否合法
                current += s[start_index:]  # 添加最后一段子字符串
                result.append(current)  # 将恢复的IP地址加入结果列表
            return

        for i in range(start_index, len(s)):
            if self.is_valid(s, start_index, i):  # 判断 [start_index, i] 这个区间的子串是否合法
                sub = s[start_index:i + 1]  # 获取子串 [start_index, i]
                current_sub_dot = current + sub + '.'  # 当前的IP地址段
                self.backtracking(s, i + 1, point_num + 1, current_sub_dot, result)  # 递归调用，更新start_index和point_num
            else:
                break  # 子串不合法，直接结束循环，进入下一个起始位置

    def is_valid(self, s, start, end):
        if start > end:
            return False
        if s[start] == '0' and start != end:  # 0开头的数字不合法，除非是单个0
            return False
        num = 0
        for i in range(start, end + 1):
            if not s[i].isdigit():  # 遇到非数字字符不合法
                return False
            num = num * 10 + int(s[i])  # 计算数字大小
            if num > 255:  # 如果大于255了不合法
                return False
        return True

#每次递归调用中，打印出 point_num、current、sub、current + sub + '.' 的值。
class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        result = []
        self.backtracking(s, 0, 0, "", result)
        return result

    def backtracking(self, s, start_index, point_num, current, result):
        if point_num == 3:
            if self.is_valid(s, start_index, len(s) - 1):
                current += s[start_index:]
                result.append(current)
                print("Found valid IP address:", current)
            return

        for i in range(start_index, len(s)):
            if self.is_valid(s, start_index, i):
                sub = s[start_index:i + 1]
                print("point_num:", point_num)
                print("current:", current)
                print("sub:", sub)
                current_sub_dot = current + sub + '.'
                print("current + sub + '.':", current_sub_dot)
                self.backtracking(s, i + 1, point_num + 1, current_sub_dot, result)
                print("Backtracking to previous state...")
            else:
                break

    def is_valid(self, s, start, end):
        if start > end:
            return False
        if s[start] == '0' and start != end:
            return False
        num = 0
        for i in range(start, end + 1):
            if not s[i].isdigit():
                return False
            num = num * 10 + int(s[i])
            if num > 255:
                return False
        return True

#回溯解法2
class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        results = []
        self.backtracking(s, 0, [], results)  # 调用回溯函数进行IP地址恢复
        return results

    def backtracking(self, s, index, path, results):
        if index == len(s) and len(path) == 4:  # 终止条件：遍历到字符串末尾且已经找到4段合法IP地址
            results.append('.'.join(path))  # 将路径中的IP地址段连接成字符串形式，并添加到结果列表中
            return

        if len(path) > 4:  # 剪枝条件：如果路径中的IP地址段已经超过4段，直接返回，不再继续探索
            return

        for i in range(index, min(index + 3, len(s))):  # 横向遍历，每次最多选择3个字符作为IP地址段的一部分
            if self.is_valid(s, index, i):  # 判断当前选择的子串是否合法
                sub = s[index:i+1]  # 获取子串 [index, i]
                path.append(sub)  # 将子串添加到路径中
                self.backtracking(s, i+1, path, results)  # 递归调用，继续下一层遍历，更新index为下一个起始位置
                path.pop()  # 回溯，将上一次选择的子串从路径中移除

    def is_valid(self, s, start, end):
        if start > end:
            return False
        if s[start] == '0' and start != end:  # 0开头的数字不合法，除非是单个0
            return False
        num = int(s[start:end+1])  # 将子串转换为整数
        return 0 <= num <= 255  # 判断整数是否在合法的IP地址段范围内

78. 子集
https://leetcode.cn/problems/subsets/

class Solution:
    def subsets(self, nums):
        result = []  # 存储最终的子集结果
        path = []  # 存储当前的路径（子集）
        self.backtracking(nums, 0, path, result)  # 调用回溯函数进行子集生成
        return result

    def backtracking(self, nums, startIndex, path, result):
        result.append(path[:])  # 在每一层递归中都将当前的路径（子集）添加到结果中，形成一个新的子集
        for i in range(startIndex, len(nums)):
            path.append(nums[i])  # 将当前元素添加到路径中，构成新的子集
            self.backtracking(nums, i + 1, path, result)  # 递归调用，startIndex更新为下一个元素的索引
            path.pop()  # 回溯，将上一次添加的元素从路径中移除，进入下一轮循环时重新选择下一个元素

#也可以这样写：
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        result = [[]]
        path = []
        self.backtracking(nums,0,path,result)
        return result

    def backtracking(self,nums,startIndex,path,result):
        
        for i in range(startIndex, len(nums)):
            
            path.append(nums[i])
            result.append(path[:])
            self.backtracking(nums,i+1,path,result)
            path.pop()

90.子集II
https://leetcode.cn/problems/subsets-ii/

#回溯+used数组
class Solution:
    def subsetsWithDup(self, nums):
        result = []
        path = []  # 当前路径
        used = [False] * len(nums)  # 记录元素是否被使用过
        nums.sort()  # 对数组进行排序，为了去重
        self.backtracking(nums, 0, used, path, result)
        return result

    def backtracking(self, nums, startIndex, used, path, result):
        result.append(path[:])  # 收集当前路径作为子集
        for i in range(startIndex, len(nums)):
            # 判断是否需要跳过当前元素，用于去重
            # 当前元素与前一个元素相同，并且前一个元素没有被使用过，说明在同一层中已经使用过相同的元素，需要跳过
            if i > 0 and nums[i] == nums[i - 1] and not used[i - 1]:
                continue
            path.append(nums[i])  # 将当前元素加入路径
            used[i] = True  # 将当前元素标记为已使用
            self.backtracking(nums, i + 1, used, path, result)  # 递归进入下一层
            used[i] = False  # 回溯，将当前元素标记为未使用
            path.pop()  # 回溯，将当前元素从路径中移除

#回溯+利用递归的时候下一个startIndex是i+1
class Solution:
    def subsetsWithDup(self, nums):
        result = []  # 结果列表，用于存储符合条件的子集
        path = []  # 当前路径，用于构建子集
        nums.sort()  # 对数组进行排序，为了去重
        self.backtracking(nums, 0, path, result)  # 调用回溯函数
        return result  # 返回结果列表

    def backtracking(self, nums, startIndex, path, result):
        result.append(path[:])  # 将当前路径添加到结果列表，表示找到一个子集
        for i in range(startIndex, len(nums)):
            # 跳过同一层中使用过的元素，避免生成重复的子集
            if i > startIndex and nums[i] == nums[i - 1]:        #去重逻辑在于 i > startIndex
                continue
            path.append(nums[i])  # 将当前元素添加到路径中
            self.backtracking(nums, i + 1, path, result)  # 递归进入下一层
            path.pop()  # 回溯，将当前元素从路径中移除


#回溯 + 利用集合去重

class Solution:
    def subsetsWithDup(self, nums):
        result = []  # 结果列表，用于存储符合条件的子集
        path = []  # 当前路径，用于构建子集
        nums.sort()  # 对数组进行排序，为了去重
        self.backtracking(nums, 0, path, result)  # 调用回溯函数
        return result  # 返回结果列表

    def backtracking(self, nums, startIndex, path, result):
        result.append(path[:])  # 将当前路径添加到结果列表，表示找到一个子集
        used = set()  # 用集合记录已经使用过的元素，用于去重
        for i in range(startIndex, len(nums)):
            if nums[i] in used:  # 如果当前元素已经被使用过，跳过，避免生成重复的子集
                continue
            used.add(nums[i])  # 将当前元素加入已使用集合中
            path.append(nums[i])  # 将当前元素添加到路径中
            self.backtracking(nums, i + 1, path, result)  # 递归进入下一层
            path.pop()  # 回溯，将当前元素从路径中移除

