300. 最长递增子序列
https://leetcode.cn/problems/longest-increasing-subsequence/description/

#1. dp[i]定义为以i结尾的最长递增子序列
#2. 递推公式为 if nums[j]>nums[i], dp[i]=max(dp[j]+1, dp[i]).
#注意这里不是要dp[i] 与 dp[j] + 1进行比较，而是我们要取dp[j] + 1的最大值。
#3. 初始值：每一个i至少为1
#4. dp[i] 是有0到i-1各个位置的最长递增子序列 推导而来，那么遍历i一定是从前向后遍历。


class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        if not nums:
            return 0
    
        dp = [1] * len(nums)
        result = dp[0]
        for i in range(1, len(nums)):
            for j in range(0,i):
                if nums[i] > nums[j]:
                    dp[i] = max(dp[i], dp[j]+1)
            result = max(result, dp[i])
        return result
