39. 组合总和
https://leetcode.cn/problems/combination-sum/

#回溯（版本一）
class Solution:
    def backtracking(self, candidates, target, total, startIndex, path, result):
        # 递归的回溯函数，用于生成组合
        if total > target:
            return  # 如果当前总和已经大于目标值，直接返回，剪枝操作
        if total == target:
            result.append(path[:])  # 如果当前总和等于目标值，将路径加入结果集
            return  # 返回上一层递归，继续搜索其他可能的组合

        for i in range(startIndex, len(candidates)):  #此时i为下标
            total += candidates[i]  # 将当前数字加入总和
            path.append(candidates[i])  # 将当前数字加入路径
            self.backtracking(candidates, target, total, i, path, result)  # 递归调用自身，继续生成组合
            total -= candidates[i]  # 回溯操作，将当前数字从总和中减去
            path.pop()  # 回溯操作，将当前数字从路径中删除

    def combinationSum(self, candidates, target):
        result = []  # 存放结果集
        self.backtracking(candidates, target, 0, 0, [], result)  # 调用回溯函数生成组合
        return result  # 返回结果集

#回溯剪枝（版本一）
class Solution:
    def backtracking(self, candidates, target, total, startIndex, path, result):
        # 递归的回溯函数，用于生成组合
        if total == target:
            result.append(path[:])  # 如果当前总和等于目标值，将路径加入结果集
            return  # 返回上一层递归，继续搜索其他可能的组合

        for i in range(startIndex, len(candidates)):
            if total + candidates[i] > target:    #剪枝操作
                break  # 如果当前总和加上当前数字已经大于目标值，结束当前循环，进行剪枝
            total += candidates[i]  # 将当前数字加入总和
            path.append(candidates[i])  # 将当前数字加入路径
            self.backtracking(candidates, target, total, i, path, result)  # 递归调用自身，继续生成组合
            total -= candidates[i]  # 回溯操作，将当前数字从总和中减去
            path.pop()  # 回溯操作，将当前数字从路径中删除

    def combinationSum(self, candidates, target):
        result = []  # 存放结果集
        candidates.sort()  # 需要对候选数字进行排序
        self.backtracking(candidates, target, 0, 0, [], result)  # 调用回溯函数生成组合
        return result  # 返回结果集


40.组合总和II 
https://leetcode.cn/problems/combination-sum-ii/submissions/

#回溯
class Solution:
    def backtracking(self, candidates, target, total, startIndex, path, result):
        # 回溯函数，用于生成组合
        if total == target:
            result.append(path[:])  # 如果当前组合的和等于目标值，将当前路径加入结果集
            return  # 返回上一层递归，继续搜索其他可能的组合

        for i in range(startIndex, len(candidates)):
            if i > startIndex and candidates[i] == candidates[i - 1]:     #使用startIndex去重的逻辑：是否是相同数值的第一个树枝，如果不是，则去掉。
            #条件设置为i != startIndex更容易理解

                continue  # 对于重复的数字，跳过当前循环，避免生成重复的组合

            if total + candidates[i] > target:
                break  # 如果当前组合的和已经大于目标值，结束当前循环，进入下一个数字

            total += candidates[i]  # 更新当前组合的和
            path.append(candidates[i])  # 将当前数字加入路径
            self.backtracking(candidates, target, total, i + 1, path, result)  # 递归调用自身，更新起始索引为 i+1，继续生成组合
            total -= candidates[i]  # 回溯操作，将当前数字从总和中减去
            path.pop()  # 回溯操作，将当前数字从路径中删除

    def combinationSum2(self, candidates, target):
        result = []  # 存放结果集
        candidates.sort()  # 对候选数字列表进行排序
        self.backtracking(candidates, target, 0, 0, [], result)  # 调用回溯函数生成组合
        return result  # 返回结果集

#回溯 使用used

#used[i - 1] == true，说明同一树枝candidates[i - 1]使用过, 可以继续
#used[i - 1] == false，说明同一树层candidates[i - 1]使用过， 需要跳过



class Solution:
    def backtracking(self, candidates, target, total, startIndex, used, path, result):
        # 回溯函数，用于生成组合
        if total == target:
            result.append(path[:])  # 如果当前组合的和等于目标值，将当前路径加入结果集
            return  # 返回上一层递归，继续搜索其他可能的组合

        for i in range(startIndex, len(candidates)):
            # 出现重复节点，同层的第一个节点已经被访问过，所以直接跳过
            if i > 0 and candidates[i] == candidates[i - 1] and not used[i - 1]:    #因为有used数组剪枝，i>0即可。
                continue

            if total + candidates[i] > target:
                break  # 如果当前组合的和已经大于目标值，结束当前循环，进入下一个数字

            total += candidates[i]  # 更新当前组合的和
            path.append(candidates[i])  # 将当前数字加入路径
            used[i] = True  # 标记当前数字已被使用
            self.backtracking(candidates, target, total, i + 1, used, path, result)  # 每个节点仅能选择一次，所以从i+1开始
            used[i] = False  # 回溯操作，将当前数字标记为未使用
            total -= candidates[i]  # 回溯操作，将当前数字从总和中减去
            path.pop()  # 回溯操作，将当前数字从路径中删除

    def combinationSum2(self, candidates, target):
        used = [False] * len(candidates)  # 用于记录候选数字是否已被使用的列表
        result = []  # 存放结果集
        candidates.sort()  # 对候选数字列表进行排序
        self.backtracking(candidates, target, 0, 0, used, [], result)  # 调用回溯函数生成组合
        return result  # 返回结果集




131.分割回文串  
https://leetcode.cn/problems/palindrome-partitioning/submissions/
class Solution:

    def partition(self, s: str) -> List[List[str]]:
        '''
        递归用于纵向遍历
        for循环用于横向遍历
        当切割线迭代至字符串末尾，说明找到一种方法
        类似组合问题，为了不重复切割同一位置，需要start_index来做标记下一轮递归的起始位置(切割线)
        '''
        result = []
        self.backtracking(s, 0, [], result)
        return result

    def backtracking(self, s, start_index, path, result ):
        # Base Case
        if start_index == len(s):
            result.append(path[:])
            return
        
        # 单层递归逻辑
        for i in range(start_index, len(s)):
            # 此次比其他组合题目多了一步判断：
            # 判断被截取的这一段子串([start_index, i])是否为回文串
            if self.is_palindrome(s, start_index, i):
                path.append(s[start_index:i+1])
                self.backtracking(s, i+1, path, result)   # 递归纵向遍历：从下一处进行切割，判断其余是否仍为回文串
                path.pop()             # 回溯


    def is_palindrome(self, s: str, start: int, end: int) -> bool:
        i: int = start        
        j: int = end
        while i < j:
            if s[i] != s[j]:
                return False
            i += 1
            j -= 1
        return True

#回溯+优化判定回文函数
class Solution:

    def partition(self, s: str) -> List[List[str]]:
        result = []
        self.backtracking(s, 0, [], result)
        return result

    def backtracking(self, s, start_index, path, result ):
        # Base Case
        if start_index == len(s):
            result.append(path[:])
            return
        
        # 单层递归逻辑
        for i in range(start_index, len(s)):
            # 若反序和正序相同，意味着这是回文串
            if s[start_index: i + 1] == s[start_index: i + 1][::-1]:
                path.append(s[start_index:i+1])
                self.backtracking(s, i+1, path, result)   # 递归纵向遍历：从下一处进行切割，判断其余是否仍为回文串
                path.pop()             # 回溯

回溯+高效判断回文子串
class Solution:
    def partition(self, s: str) -> List[List[str]]:
        result = []
        isPalindrome = [[False] * len(s) for _ in range(len(s))]  # 初始化 isPalindrome 矩阵
        self.computePalindrome(s, isPalindrome)
        self.backtracking(s, 0, [], result, isPalindrome)
        return result

    def backtracking(self, s, startIndex, path, result, isPalindrome):
        if startIndex >= len(s):
            result.append(path[:])
            return

        for i in range(startIndex, len(s)):
            if isPalindrome[startIndex][i]:   # 如果是回文子串
                substring = s[startIndex:i + 1]
                path.append(substring)
                self.backtracking(s, i + 1, path, result, isPalindrome)  # 递归调用：寻找下一个起始位置的子串
                path.pop()           # 回溯过程，将已经填入的子串弹出

    def computePalindrome(self, s, isPalindrome):

        # 给定一个字符串s, 长度为n, 它成为回文字串的充分必要条件是s[0] == s[n-1]且s[1:n-1]是回文字串。
        # 可以高效地事先一次性计算出, 针对一个字符串s, 它的任何子串是否是回文字串,
        # 然后在我们的回溯函数中直接查询即可, 省去了双指针移动判定这一步骤。

        for i in range(len(s) - 1, -1, -1):  # 倒序计算，保证在第 i 行时，第 i+1 行已经计算好了
            for j in range(i, len(s)):
                if j == i:                                    #如果 j 等于 i，说明只有一个字符，该子串一定是回文串，将 isPalindrome[i][j] 设置为 True。
                    isPalindrome[i][j] = True
                elif j - i == 1:                              #如果 j - i 等于 1，说明有两个字符，如果这两个字符相等，则该子串是回文串，将 isPalindrome[i][j] 设置为 True。
                    isPalindrome[i][j] = (s[i] == s[j])
                else:                                         #对于其他情况，如果 s[i] 等于 s[j]，并且 isPalindrome[i+1][j-1] 也是回文串，则该子串是回文串，将 isPalindrome[i][j] 设置为 True。
                    isPalindrome[i][j] = (s[i] == s[j] and isPalindrome[i+1][j-1])
