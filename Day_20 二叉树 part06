654.最大二叉树
https://leetcode.cn/problems/maximum-binary-tree/

class Solution:
    def constructMaximumBinaryTree(self, nums: List[int]) -> TreeNode:
        # 如果数组只有一个元素，直接创建一个节点返回
        if len(nums) == 1:
            return TreeNode(nums[0])
        # 创建这个初始节点，在递归的过程中不断地构建出更深层次的节点
        node = TreeNode(0)
        # 找到数组中最大的值和对应的下标
        maxValue = 0
        maxValueIndex = 0
        for i in range(len(nums)):
            if nums[i] > maxValue:
                maxValue = nums[i]
                maxValueIndex = i
        # 设置节点的值为最大值
        node.val = maxValue
        # 最大值所在的下标左区间 构造左子树
        if maxValueIndex > 0:                    #大于0说明左边至少有1个节点      
            new_list = nums[:maxValueIndex]
            node.left = self.constructMaximumBinaryTree(new_list)
        # 最大值所在的下标右区间 构造右子树
        if maxValueIndex < len(nums) - 1:        #小于size-1说明右边至少有1个节点    
            new_list = nums[maxValueIndex+1:]
            node.right = self.constructMaximumBinaryTree(new_list)
        # 返回节点
        return node

#使用下标递归法
class Solution:
    def traversal(self, nums: List[int], left: int, right: int) -> TreeNode:
        # 当左边界大于等于右边界时，表示没有元素可以构建子树，返回 None
        if left >= right:
            return None
        # 在当前范围内找到最大值的索引
        maxValueIndex = left
        for i in range(left + 1, right):
            if nums[i] > nums[maxValueIndex]:
                maxValueIndex = i
        # 创建根节点，并将最大值赋给根节点的值
        root = TreeNode(nums[maxValueIndex])
        # 递归构建左子树
        root.left = self.traversal(nums, left, maxValueIndex)
        # 递归构建右子树
        root.right = self.traversal(nums, maxValueIndex + 1, right)
        # 返回根节点
        return root

    def constructMaximumBinaryTree(self, nums: List[int]) -> TreeNode:
        # 调用递归函数，传入数组和数组的范围
        return self.traversal(nums, 0, len(nums))

#使用切片
class Solution:
    def constructMaximumBinaryTree(self, nums: List[int]) -> TreeNode:
        if not nums:
            return None
        max_val = max(nums)
        max_index = nums.index(max_val)
        node = TreeNode(max_val)
        node.left = self.constructMaximumBinaryTree(nums[:max_index])
        node.right = self.constructMaximumBinaryTree(nums[max_index+1:])
        return node


617.合并二叉树
https://leetcode.cn/problems/merge-two-binary-trees/

#递归 - 前序 - 修改root1
class Solution:
    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:
        # 递归终止条件: 
        #  但凡有一个节点为空, 就立刻返回另外一个. 如果另外一个也为None就直接返回None. 
        if not root1: 
            return root2
        if not root2: 
            return root1
        # 上面的递归终止条件保证了代码执行到这里root1, root2都非空. 
        root1.val += root2.val # 中
        root1.left = self.mergeTrees(root1.left, root2.left) #左
        root1.right = self.mergeTrees(root1.right, root2.right) # 右
        
        return root1 #本题我们重复使用了题目给出的节点而不是创建新节点. 节省时间, 空间. 


#递归 - 前序 - 新建root
class Solution:
    def mergeTrees(self, root1: TreeNode, root2: TreeNode) -> TreeNode:
        # 递归终止条件: 
        #  但凡有一个节点为空, 就立刻返回另外一个. 如果另外一个也为None就直接返回None. 
        if not root1: 
            return root2
        if not root2: 
            return root1
        # 上面的递归终止条件保证了代码执行到这里root1, root2都非空. 
        root = TreeNode() # 创建新节点
        root.val += root1.val + root2.val# 中
        root.left = self.mergeTrees(root1.left, root2.left) #左
        root.right = self.mergeTrees(root1.right, root2.right) # 右
        
        return root #注意: 本题我们创建了新节点. 

700.二叉搜索树中的搜索
https://leetcode.cn/problems/search-in-a-binary-search-tree/


#递归1
class Solution:
    def searchBST(self, root: TreeNode, val: int) -> TreeNode:
        # 为什么要有返回值: 
        #   因为搜索到目标节点就要立即return，
        #   这样才是找到节点就返回（搜索某一条边），如果不加return，就是遍历整棵树了。

        if not root or root.val == val: 
            return root

        if root.val > val: 
            return self.searchBST(root.left, val)

        if root.val < val: 
            return self.searchBST(root.right, val)


#迭代2
class Solution:
    def searchBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        while root:
            if val < root.val:
                root = root.left

            elif val > root.val:
                root = root.right

            else:
                return root

        return None

98.验证二叉搜索树
https://leetcode.cn/problems/validate-binary-search-tree/


#递归法（版本一）利用中序递增性质，转换成数组
class Solution:
    def __init__(self):
        self.vec = []  # 初始化一个空列表，用于按顺序存储二叉树的元素

    def traversal(self, root):
        if root is None:  # 基本情况：如果根节点为空，返回
            return
        self.traversal(root.left)  # 递归遍历左子树
        self.vec.append(root.val)  # 将当前节点的值添加到列表中
        self.traversal(root.right)  # 递归遍历右子树

    def isValidBST(self, root):
        self.vec = []  # 在执行遍历之前清空列表
        self.traversal(root)  # 执行二叉树的中序遍历

        # 检查列表中的元素是否严格递增
        for i in range(1, len(self.vec)):
            if self.vec[i] <= self.vec[i - 1]:  # 如果任何元素小于等于前一个元素，返回False
                return False

        return True  # 如果所有元素都严格递增，返回True

#递归法（版本二）设定极小值，进行比较
class Solution:
    def __init__(self):
        self.maxVal = float('-inf')  # 使用负无穷大来初始化最大值，因为后台测试数据中可能存在 int 类型的最小值

    def isValidBST(self, root):
        if root is None:  # 如果根节点为空，表示已经遍历到叶子节点的下一层，返回True
            return True

        left = self.isValidBST(root.left)  # 递归验证左子树是否是二叉搜索树

        # 中序遍历，在遍历过程中验证元素是否按照从小到大的顺序排列
        if self.maxVal < root.val:  # 当前节点的值大于最大值，符合二叉搜索树的要求
            self.maxVal = root.val  # 更新最大值
        else:
            return False  # 当前节点的值小于等于最大值，不符合二叉搜索树的要求，返回False

        right = self.isValidBST(root.right)  # 递归验证右子树是否是二叉搜索树

        return left and right  # 左右子树都是二叉搜索树才返回True，否则返回False

