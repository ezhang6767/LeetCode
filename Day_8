344.反转字符串

https://leetcode.cn/problems/reverse-string/

编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。

不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。

你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。

class Solution:
    def reverseString(self, s: List[str]) -> None:
        """
        Do not return anything, modify s in-place instead.
        """
        # 该方法已经不需要判断奇偶数，经测试后时间空间复杂度比用 for i in range(right//2)更低
        # 推荐该写法，更加通俗易懂
        left, right = 0, len(s)-1
        while left < right:
            s[left], s[right] = s[right], s[left]
            left += 1
            right -= 1
            
            
541. 反转字符串II

https://leetcode.cn/problems/reverse-string-ii/

给定一个字符串 s 和一个整数 k，从字符串开头算起, 每计数至 2k 个字符，就反转这 2k 个字符中的前 k 个字符。

如果剩余字符少于 k 个，则将剩余字符全部反转。

如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。

解题思路：
在遍历字符串的过程中，只要让 i += (2 * k)，i 每次移动 2 * k 就可以了，然后判断是否需要有反转的区间。

class Solution:
    def reverseStr(self, s: str, k: int) -> str:
        def reverseSub(text):
            left, right = 0, len(text)-1
            while left < right:
                text[left], text[right] = text[right], text[left]
                left += 1
                right -= 1
            return text

        res = list(s)

        for i in range(0, len(s), 2 * k):               #寻找每2k点起始位
            res[i : i+k] = reverseSub(res[i : i+k])     #对[i:i+k]区间进行反转

        return ''.join(res)                             #list转化为string

#切片简便写法
class Solution:
    def reverseStr(self, s: str, k: int) -> str:
        i = 0
        while i < len(s):

            s = s[:i] + s[i : i+k][::-1] + s[i + k:]    #切片

            i = i + 2*k                                 #寻找下一个切片起始点

        return s


剑指Offer 05.替换空格

https://leetcode.cn/problems/ti-huan-kong-ge-lcof/

请实现一个函数，把字符串 s 中的每个空格替换成"%20"。

示例 1： 输入：s = "We are happy."
输出："We%20are%20happy."

#解题思路

首先扩充数组到每个空格替换成"%20"之后的大小。

然后从后向前替换空格，也就是双指针法

#简便写法
class Solution:
    def replaceSpace(self, s: str) -> str:
        #split 把string通过空格拆分成list
        #join 把list组合起来，''中的为组合分隔符
        return '%20'.join(s.split(' '))
        
#双指针        
class Solution:
    def replaceSpace(self, s: str) -> str:
        counter = s.count(' ') #count计算出空格数量

        res = list(s)           #string转化为list

        res.extend([' '] * counter * 2) #每遇到一个空格扩展2个位置

        left, right = len(s) - 1, len(res) - 1  #一个指针从扩展后的数据从后往前写入数据，一个数据从原始数据位读取数据

        while left >= 0:
            if res[left] != ' ':
                res[right] = res[left]      #如果不为空格， 从右边开始复制原string的数据
                right -= 1

            else:
                #遇到空格，更改right -2, right - 1, right 的数值， 左闭右开
                res[right - 2: right + 1] = '%20'   

                right -= 3

            left -= 1
        return ''.join(res)     #list转换成string 

        
