Day 9

28. 实现 strStr()

https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/

实现 strStr() 函数。

给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。

示例 1: 输入: haystack = "hello", needle = "ll" 输出: 2

示例 2: 输入: haystack = "aaaaa", needle = "bba" 输出: -1

class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        a = len(needle)
        b = len(haystack)
        if a == 0:
            return 0
        next = self.getNext(a,needle)
        p = -1
        for j in range(b):
            while p >= 0 and needle[p+1] != haystack[j]:    #当needle和haystack不相等的时候，去next模组找定位点
                p = next[p]
            if needle[p+1] == haystack[j]:                  #当needle和haystack相等的时候，needle下标右移
                p += 1
            if p == a-1:                                    #当needle下标到达尽头，haystack已经遍历过的长度(j+1)减去needle的长度(a)
                return j-a+1
        return -1


    def getNext(self, a, needle):
        next = ['' for i in range(a)]                       #初始化next数组  或者 [0] * a 数组更高效
        k = -1                                              #初始化next数组下标
        next[0] = k                                         #初始化next数组的第一个数值
        for i in range(1, a):
            while k > -1 and needle[k+1] != needle[i]:      #当不相同的时候，k = next数组里的值
                k = next[k]

            if needle[k+1] == needle[i]:                    #当值相同的时候，下标+1
                k += 1

            next[i] = k                                     # 将当前的next值保存在next数组中

        return next
459.重复的子字符串
https://leetcode.cn/problems/repeated-substring-pattern/
给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。


#KMP算法
class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        if len(s) == 0:
            return False            #当字符串s为空串时，next数组的长度为0，next[-1]不存在。
        next = [0] * len(s)         #对整个字符串进行next数组计算
        self.getNext(next, s)
        if next[-1] != -1 and len(s) % (len(s) - (next[-1]+1)) == 0:    #如果next[-1]=-1, 说明s没有重复的子字符串
            return True, print(next)                                    #s的长度能整除（s长度 - 最长公共前后缀的长度）即 s长度能整除一个最小重复子串说明True
        return False, print(next)                                       #子串的长度为模式串的长度减去最长前缀后缀匹配长度再减去1

    
    def getNext(self, next, s):
        next[0] = -1                                                    #初始化为-1
        j = -1
        for i in range(1, len(s)):                                      
            while j >= 0 and s[i] != s[j+1]:                            #从第二个字符开始遍历模式串。
                j = next[j]                                            
            
            if s[i] == s[j+1]:                                          #1.对于每个位置i，我们先向前移动指针j，
                j += 1                                                  #直到找到一个位置j+1，使得s[0:j+1]是s[0:i+1]的一个后缀，
                                                                        #并且s[j+1]等于s[i]。
            next[i] = j                                                 #2.如果没有找到这样的位置，则说明s[0:i+1]没有最长前缀后缀
                                                                        #此时next[i]=j
        
        return next
