1143.最长公共子序列
https://leetcode.cn/problems/longest-common-subsequence/description/

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        #1.dp[i][j]: 长度为[0,i-1]的字符串text1,长度为[0,j-1]的字符串text2的最长公共子序列为dp[i][j]
        #2.递推公式：text1[i - 1] 与 text2[j - 1]相同，text1[i - 1] 与 text2[j - 1]不相同
        #3.初始化: dp[i][0] = 0, dp[j][0] = 0
        #4.递推顺序：从前向后，从上到下
        #5.打印dp数组

        dp = [[0] * (len(text2)+1) for _ in range(len(text1)+1)]

        for i in range(1, len(text1)+1):
            for j in range(1, len(text2)+1):
                if text1[i-1] == text2[j-1]:
                    dp[i][j] = dp[i-1][j-1] + 1

                else:
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1])

        return dp[-1][-1]


1143.最长公共子序列
https://leetcode.cn/problems/uncrossed-lines/description/

class Solution:
    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:
        dp = [[0] * (len(nums2)+1) for _ in range(len(nums1)+1)]
        
        for i in range(1, len(nums1)+1):
            for j in range(1, len(nums2)+1):
                if nums1[i-1] == nums2[j-1]:
                    dp[i][j] = dp[i-1][j-1]+1

                else:
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])

        print(dp)
        return dp[-1][-1]




53. 最大子序和 
https://leetcode.cn/problems/maximum-subarray/

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        dp = [0] * len(nums)
        dp[0] = nums[0]
        result = dp[0]                #不能设置为负无穷因为从1开始遍历
        for i in range(1, len(nums)):
            dp[i] = max(dp[i-1] + nums[i], nums[i]) #状态转移公式
            result = max(result, dp[i]) #result 保存dp[i]的最大值
        return result
