
977. 有序数组的平方
https://leetcode.cn/problems/squares-of-a-sorted-array/

给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。

解题思路：

数组其实是有序的， 只不过负数平方之后可能成为最大数了。
那么数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。
此时可以考虑双指针法了，i指向起始位置，j指向终止位置。
定义一个新数组result，和A数组一样的大小，让k指向result数组终止位置。
如果A[i] * A[i] < A[j] * A[j] 那么result[k--] = A[j] * A[j]; 。
如果A[i] * A[i] >= A[j] * A[j] 那么result[k--] = A[i] * A[i]; 。

注意事项：
1. 如果没有left = right，while循环遍历不完整, 最后一个值(最小值)取不到。
2. 右指针的边际为len(nums) - 1.
3. k -= 1循环可以放在if else 循环内外都可以。

class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        left, right, k = 0, len(nums)-1, len(nums)-1
        result = [0] * len(nums)
        while left <= right:
            if nums[left]*nums[left] < nums[right]*nums[right]:
                print(left,right,k)
                result[k] = nums[right]*nums[right]
                right -= 1

            else:
                result[k] = nums[left]*nums[left]
                print(left,right,k)
                left += 1
            k -= 1
        return result
        
        
209.长度最小的子数组
https://leetcode.cn/problems/minimum-size-subarray-sum/

给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。

解题思路：
1.窗口内是什么？
窗口是， 满足其和 ≥ s 的长度最小的 连续子数组。

2.如何移动窗口的起始位置？
窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。

3.如何移动窗口的结束位置？
窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。

滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将O(n^2)暴力解法降为O(n)。

注意事项：
1. while Sum >= target 和while Sum > target的不同。如果while Sum > target， 当整个nums总和等于target的时候，由于缺少Sum = target这一判断条件，会得到错误答案（0）。
2. left++的顺序问题，由于需要先减去nums[left], 所以left++应当放在最后一步
3. 结尾如何判断当nums里数组不存在"满足其和 ≥ s 的长度最小的 连续 子数组".


class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        left, right = 0, 0
        res = float("inf")
        Sum = 0

        for right in range(len(nums)):
            Sum += nums[right]
            while Sum >= target:
                res = min(res, right-left+1)
                Sum -= nums[left]
                left += 1
        
        if res == float("inf"):
            return 0
        else:
            return res
            
59. 螺旋矩阵 II
https://leetcode.cn/problems/spiral-matrix-ii/

图：
https://excalidraw.com/#json=_iRx_xhQy4N0NPaews3JF,P4RmAuSSQTOKARVgo-iaqQ

解题思路：
1. 坚持循环不变量原则
2. 模拟顺时针画矩阵的过程
3. 确定边界条件

注意事项：
1. 确定迭代次数，矩阵中心点，初始化条件。
2. 画图确定循环边界的4个点。
3. 倒序遍历写法。
4. 第二圈更新起始位置。
5. 确定n为奇数值时赋值的方法。




#根据左闭右开原则

class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        nums = [[0]* n for _ in range(n)]
        startx, starty = 0, 0                     #起始点
        loop = n//2                               #迭代次数 / offset的边界点为边n的中心
        mid = n//2                                #矩阵的中心点
        count = 1                                 #计数
        
        for offset in range(1, loop+1):       
            for i in range(starty, n-offset):     #从左到右
                nums[startx][i] = count
                count += 1

            for i in range(startx, n-offset):     #从上到下
                nums[i][n-offset] = count
                count += 1

            for i in range(n-offset,starty, -1):  #从右到左
                nums[n-offset][i] = count
                count += 1

            for i in range(n-offset,startx,-1):   #从下到上
                nums[i][starty] = count
                count += 1
                
            #第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1)    
            startx += 1
            starty += 1

        if n % 2 != 0:                            #如果n为奇数的话，需要单独给矩阵最中间的位置赋值
            nums[mid][mid] = count
        return nums




