动态规划：完全背包理论基础

完全背包和01背包相比：
1. 纯完全背包从前向后遍历。
2. 纯完全背包的for循环顺序可以颠倒。




Python：
先遍历物品，再遍历背包（无参版）

def test_CompletePack():
    weight = [1, 3, 4]
    value = [15, 20, 30]
    bagWeight = 4
    dp = [0] * (bagWeight + 1)
    for i in range(len(weight)):  # 遍历物品
        for j in range(weight[i], bagWeight + 1):  # 遍历背包容量
            dp[j] = max(dp[j], dp[j - weight[i]] + value[i])
    print(dp[bagWeight])

test_CompletePack()

先遍历物品，再遍历背包（有参版）

def test_CompletePack(weight, value, bagWeight):
    dp = [0] * (bagWeight + 1)
    for i in range(len(weight)):  # 遍历物品
        for j in range(weight[i], bagWeight + 1):  # 遍历背包容量
            dp[j] = max(dp[j], dp[j - weight[i]] + value[i])
    return dp[bagWeight]

if __name__ == "__main__":
    weight = [1, 3, 4]
    value = [15, 20, 30]
    bagWeight = 4
    result = test_CompletePack(weight, value, bagWeight)
    print(result)

先遍历背包，再遍历物品（无参版）

def test_CompletePack():
    weight = [1, 3, 4]
    value = [15, 20, 30]
    bagWeight = 4

    dp = [0] * (bagWeight + 1)

    for j in range(bagWeight + 1):  # 遍历背包容量
        for i in range(len(weight)):  # 遍历物品
            if j - weight[i] >= 0:
                dp[j] = max(dp[j], dp[j - weight[i]] + value[i])

    print(dp[bagWeight])

test_CompletePack()


先遍历背包，再遍历物品（有参版）

def test_CompletePack(weight, value, bagWeight):
    dp = [0] * (bagWeight + 1)
    for j in range(bagWeight + 1):  # 遍历背包容量
        for i in range(len(weight)):  # 遍历物品
            if j - weight[i] >= 0:
                dp[j] = max(dp[j], dp[j - weight[i]] + value[i])
    return dp[bagWeight]


if __name__ == "__main__":
    weight = [1, 3, 4]
    value = [15, 20, 30]
    bagWeight = 4
    result = test_CompletePack(weight, value, bagWeight)
    print(result)


Day_44 动态规划06
https://leetcode.cn/problems/coin-change-ii/
1. 先遍历物品，后遍历背包为排列，反之为组合
2. 递推公式参考494.目标和
3. 先打印二维数组，再打印一维数组比较容易理解。


#二维DP
class Solution:
    def change(self, amount: int, coins: list) -> int:
        # 创建二维dp数组，dp[i][j]表示使用前i种硬币凑成金额j的方式数量
        dp = [[0] * (amount + 1) for _ in range(len(coins) + 1)]
        
        # 初始化状态，凑成金额0的方式数量为1
        for i in range(len(coins) + 1):
            dp[i][0] = 1
        
        # 遍历硬币和金额
        for i in range(1, len(coins) + 1):
            for j in range(1, amount + 1):
                if j < coins[i - 1]:
                    # 如果当前金额小于硬币面额，无法选取该硬币
                    dp[i][j] = dp[i - 1][j]
                else:
                    # 可以选择选取或不选取当前硬币
                    dp[i][j] = dp[i - 1][j] + dp[i][j - coins[i - 1]]
        
        # 打印状态图
        for row in dp:
            print(row)
        
        return dp[len(coins)][amount]

# 测试代码
solution = Solution()
amount = 5
coins = [1, 2, 5]
result = solution.change(amount, coins)
print("Result:", result)

#一维DP
class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        dp = [0]*(amount + 1)
        dp[0] = 1
        # 遍历物品
        for i in range(len(coins)):
            # 遍历背包
            for j in range(coins[i], amount + 1):
                dp[j] += dp[j - coins[i]]
        return dp[amount]
377. 组合总和 Ⅳ
https://leetcode.cn/problems/combination-sum-iv/


卡哥版

class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [0] * (target + 1)
        dp[0] = 1
        for i in range(1, target + 1):  # 遍历背包
            for j in range(len(nums)):  # 遍历物品
                if i - nums[j] >= 0:
                    dp[i] += dp[i - nums[j]]
        return dp[target]

优化版

class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [0] * (target + 1)  # 创建动态规划数组，用于存储组合总数
        dp[0] = 1  # 初始化背包容量为0时的组合总数为1

        for i in range(1, target + 1):  # 遍历背包容量
            for j in nums:  # 遍历物品列表
                if i >= j:  # 当背包容量大于等于当前物品重量时
                    dp[i] += dp[i - j]  # 更新组合总数

        return dp[-1]  # 返回背包容量为target时的组合总数
