Day 1

数组理论基础:

LeetCode题目链接：
https://programmercarl.com/%E6%95%B0%E7%BB%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html

Leet Code

704. 二分查找
https://leetcode.cn/problems/binary-search/
题目描述：给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。


思路分析：

1. 前提为有序数组且数组中无重复元素,否则下标将不唯一。
2. 边界条件需要先定义清楚。区间的定义一般为两种，左闭右闭即[left, right]，或者左闭右开即[left, right)。
3. 左闭右闭： 

while left <= right: 因为left == right 有意义。
             if nums[middle] > target: right = middle - 1 因为nums[middle]一定不等于target, 所以right更新为middle - 1.
4. 左闭右开： 

while left < right: 因为left == right 无意义。
             if nums[middle] > target: right = middle 因为nums[middle]不等于target 且右开区间， 所以right更新为middle.

5. 关于mid的写法


来自https://juejin.cn/post/7145742873009324040：

mid = (right - left) // 2、mid = (right + left) // 2 以及 mid = left + (right - left) // 2


mid = (right - left) // 2 这种写法运用在这里根本就是错误的。因为right - left 仅仅代表两者之间相差几个数的距离，再除以2只是说从左到右的一半距离，和下标就没有关系了。


mid = (right + left) // 2这种写法会发生上溢问题。int 占用 4 字节，32 比特，数据范围为：-2147483648 ~ 2147483647 [-2^31 ~ 2^31-1]
那么对于两个都接近 2147483647的数字而言，它们相加的结果将会溢出，变成负数。所以，为了避免溢出情况的发生，我们不采用这种写法。


mid = left + (right - left) // 2 从左指针到右指针的一半距离 + 左指针的下标 才是符合题的下标位置。

作者：FancyIcookie
链接：https://juejin.cn/post/7145742873009324040
来源：稀土掘金
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


#题解：
#左闭右闭
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums)-1
        while left <= right:
            middle = left + (right - left) // 2
            if target < nums[middle]:
                right = middle - 1        #target在左区间，所以[left, middle - 1]
            
            elif nums[middle] < target: #注意是elif
                left = middle + 1         #target在右区间，所以[middle + 1, right]

            else:
                return middle

        return -1
        
#左闭右开       
class Solution:
    def search(self, nums: List[int], target: int) -> int:

        left, right = 0, len(nums)
        while left < right:
            middle = left + (right - left) // 2
            if target < nums[middle]:       #target 在右区间，在[middle + 1, right)中
                right = middle

            elif nums[middle] < target:
                left = middle + 1           #target 在左区间，在[left, middle)中

            else:
                return middle

        return -1
        
        
27. 移除元素
https://leetcode.cn/problems/remove-element/
给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

示例 1: 给定 nums = [3,2,2,3], val = 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。

示例 2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。

思路：

双指针法（快慢指针法）： 通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。

定义快慢指针：
快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组
慢指针：指向更新 新数组下标的位置

时间复杂度：O(n)
空间复杂度：O(1)


class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        slow, fast = 0, 0
        while fast < len(nums):
            if nums[fast] != val:
                nums[slow] = nums[fast]
                slow += 1
            fast +=1
        return slow        
