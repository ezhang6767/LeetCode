01背包

二维数组：

#代码随想录
def test_2_wei_bag_problem1(weight, value, bagweight):
    # 二维数组
    dp = [[0] * (bagweight + 1) for _ in range(len(weight))]

    # 初始化
    for j in range(weight[0], bagweight + 1):
        dp[0][j] = value[0]

    # weight数组的大小就是物品个数
    for i in range(1, len(weight)):  # 遍历物品
        for j in range(bagweight + 1):  # 遍历背包容量
            if j < weight[i]:
                dp[i][j] = dp[i - 1][j]
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i])

    return dp[len(weight) - 1][bagweight]

if __name__ == "__main__":

    weight = [1, 3, 4]
    value = [15, 20, 30]
    bagweight = 4

    result = test_2_wei_bag_problem1(weight, value, bagweight)
    print(result)


#Chatgpt
def knapsack(weights, values, capacity):
    n = len(weights)
    dp = [[0] * (capacity + 1) for _ in range(n)]

    for i in range(n):
        for w in range(capacity + 1):
            if weights[i] <= w:
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i]] + values[i])
            else:
                dp[i][w] = dp[i - 1][w]

    return dp

weights = [1, 3, 4]
values = [15, 20, 30]
capacity = 4

dp = knapsack(weights, values, capacity)

# 打印dp数组
for row in dp:
    print(row)







以下是根据背包最大重量为4，物品重量和价值如下的dp数组：

plaintext
Copy code
dp数组:
[0, 15, 15, 15, 15]
[0, 15, 15, 20, 35]
[0, 15, 15, 20, 35]


dp[1][3] = 20 的计算如下：

不放入物品1，只放入物品0。这意味着背包的剩余容量为3，总价值为 dp[0][3]。根据初始化的值，dp[0][3] = 15，因为背包容量为3时，只能放入物品0，其价值为15。

放入物品1。这意味着背包的剩余容量为0，总价值为 dp[0][0] 加上物品1的价值，即 dp[0][0] + value[1]。根据初始化的值，dp[0][0] = 0，因此总价值为 0 + 20 = 20。

因此，dp[1][3] 的值是这两种选择中的最大值，即 dp[1][3] = max(dp[0][3], dp[0][0] + value[1]) = max(15, 0 + 20) = 20。


一维数组：
Q:为什么能压缩成一维数组？
A:因为dp[i][j]的更新至于dp[i-1]的状态有关，那么我们可以像斐波那契数列那样优化，只保留两行就够了，
每一次根据第一行来更新第二行的信息，然后再把第二行替换为第一行。

Q：为什么一维数组是倒叙遍历？
A: 倒序遍历是为了保证物品i只被放入一次！。但如果一旦正序遍历了，那么物品0就会被重复加入多次。例如：
物品0重量为1
物品1重量为4
那么，在正序遍历时，背包容量为2 3时会将重量为1的信息也通过递推公式重复利用，从而将物品0多算2次
而在二维数组情况下，因为各个物品使用不同的行(i);递推时是根据i-1行的内容来推的，所以不存在这样的问题了


Q: 为什么一维数组需要先遍历物品再遍历背包？
A: 因为一维dp的写法，背包容量一定是要倒序遍历（原因上面已经讲了），如果遍历背包容量放在上一层，那么每个dp[j]就只会放入一个物品，即：背包里只放入了一个物品。

倒序遍历的原因是，本质上还是一个对二维数组的遍历，并且右下角的值依赖上一层左上角的值，因此需要保证左边的值仍然是上一层的，从右向左覆盖。

（这里如果读不懂，就再回想一下dp[j]的定义，或者就把两个for循环顺序颠倒一下试试！）

无参版

def test_1_wei_bag_problem():
    weight = [1, 3, 4]
    value = [15, 20, 30]
    bagWeight = 4

    # 初始化
    dp = [0] * (bagWeight + 1)
    for i in range(len(weight)):  # 遍历物品
        for j in range(bagWeight, weight[i] - 1, -1):  # 遍历背包容量
            dp[j] = max(dp[j], dp[j - weight[i]] + value[i])

    print(dp[bagWeight])


test_1_wei_bag_problem()
有参版

def test_1_wei_bag_problem(weight, value, bagWeight):
    # 初始化
    dp = [0] * (bagWeight + 1)
    for i in range(len(weight)):  # 遍历物品
        for j in range(bagWeight, weight[i] - 1, -1):  # 遍历背包容量
            dp[j] = max(dp[j], dp[j - weight[i]] + value[i])

    return dp[bagWeight]


if __name__ == "__main__":

    weight = [1, 3, 4]
    value = [15, 20, 30]
    bagweight = 4

    result = test_1_wei_bag_problem(weight, value, bagweight)
    print(result)

     首先，我们要知道二维数组dp【i】【j】里面存储的是将物品【0,i】放入容量为j的背包能获得的最大价值，那么最后一个元素dp【m】【n】表示的就是将物品【0,m】放入容量为n的背包能获得的最大价值。
     其次，再说一下dp【i】【j】的更新，dp【i】【j】更新有两种情况
     不把物品i放入背包，dp【i】【j】 = dp【i-1】【j】；由于背包j容量有限小于物品i的体积(可以剪枝的部分)或者放入物品i不划算，此时将物品【0,i-1】放入容量为j的背包能获得的最大价值与将物品【0,i】放入容量为j的背包能获得的最大价值相等；
     把物品i放入背包，此时需要考虑给物品i预留足够的容量【j-weight_i】；因为是在【0,i-1】的基础上放入物品i，所以dp【i】【j】 = dp【i-1】【j-weight_i】+value_i。
     经过观察可以发现，dp【i】【j】的更新只与dp【i-1】的状态有关，那么我们可以像斐波那契数列那样优化，只保留两行就够了，每一次根据第一行来更新第二行的信息，然后再把第二行替换为第一行。
     针对于物品i，dp【1】【j】 = max(dp【0】【j】,dp【0】【j-weight_i】+value_i)
     还能进一步压缩空间吗，显然是可以，再仔细观察我们发现，dp【i】【j】的更新只与dp【i-1】【j】和dp【i-1】【j-weight_i】左上角这两个数据有关，而与右边的数据无关，那么从右向左遍历，遍历时左边的数据还是上一行的数据没有更新， 这样子用一行数组很好的实现了我们的最终目的。
     看到这里，你肯定是明白为什么可以用一维数组，以及为什么要从后向前遍历了。


416. 分割等和子集
https://leetcode.cn/problems/partition-equal-subset-sum/



卡哥版

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        _sum = 0

        # dp[i]中的i表示背包内总和
        # 题目中说：每个数组中的元素不会超过 100，数组的大小不会超过 200
        # 总和不会大于20000，背包最大只需要其中一半，所以10001大小就可以了
        dp = [0] * 10001
        for num in nums:
            _sum += num
        # 也可以使用内置函数一步求和
        # _sum = sum(nums)
        if _sum % 2 == 1:
            return False
        target = _sum // 2

        # 开始 0-1背包
        for num in nums:
            for j in range(target, num - 1, -1):  # 每一个元素一定是不可重复放入，所以从大到小遍历
                dp[j] = max(dp[j], dp[j - num] + num)

        # 集合中的元素正好可以凑成总和target
        if dp[target] == target:
            return True
        return False

卡哥版(简化版)

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        if sum(nums) % 2 != 0:
            return False
        target = sum(nums) // 2
        dp = [0] * (target + 1)
        for num in nums:
            for j in range(target, num-1, -1):
                dp[j] = max(dp[j], dp[j-num] + num)
        return dp[-1] == target

二维DP版

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        
        total_sum = sum(nums)

        if total_sum % 2 != 0:
            return False

        target_sum = total_sum // 2
        dp = [[False] * (target_sum + 1) for _ in range(len(nums) + 1)]

        # 初始化第一行（空子集可以得到和为0）
        for i in range(len(nums) + 1):
            dp[i][0] = True

        for i in range(1, len(nums) + 1):
            for j in range(1, target_sum + 1):
                if j < nums[i - 1]:
                    # 当前数字大于目标和时，无法使用该数字
                    dp[i][j] = dp[i - 1][j]
                else:
                    # 当前数字小于等于目标和时，可以选择使用或不使用该数字
                    dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]

        return dp[len(nums)][target_sum]

一维DP版

class Solution:
    def canPartition(self, nums: List[int]) -> bool:

        total_sum = sum(nums)

        if total_sum % 2 != 0:
            return False

        target_sum = total_sum // 2
        dp = [False] * (target_sum + 1)
        dp[0] = True

        for num in nums:
            # 从target_sum逆序迭代到num，步长为-1
            for i in range(target_sum, num - 1, -1):
                dp[i] = dp[i] or dp[i - num]
        return dp[target_sum]

 
