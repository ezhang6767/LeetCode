Day 7
第454题.四数相加II
https://leetcode.cn/problems/4sum-ii/
给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。

#dict解法
class Solution:
    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        hashmap = {}
        for n1 in nums1:
            for n2 in nums2:
                if n1 + n2 in hashmap:
                    hashmap[n1+n2] += 1         #更新hashmap里key的value
                else:
                    hashmap[n1+n2] = 1          #创建hashmap,或者用defaultdict
        count = 0
        for n3 in nums3:
            for n4 in nums4:
                if - n3 - n4 in hashmap:        #在hashmap里寻找匹配值
                    count += hashmap[-n3-n4]    #更新计数器    
        return count                            #需要return count


#defaultdict解法        
class Solution:
    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        hashmap = collections.defaultdict(int)  #填入int允许在键不存在时将其初始值设置为0
        for i in nums1:
            for j in nums2:
                hashmap[i+j] += 1
        count = 0    
        for i in nums3:
            for j in nums4:
                count += hashmap[-i-j]

        return count

383. 赎金信        
给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串 ransom 能不能由第二个字符串 magazines 里面的字符构成。如果可以构成，返回 true ；否则返回 false。

(题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。杂志字符串中的每个字符只能在赎金信字符串中使用一次。)
https://leetcode.cn/problems/ransom-note/



#hash法        
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        hashmap = dict()
        
        for i in ransomNote:
            if i in hashmap:
                hashmap[i] += 1
            else:
                hashmap[i] = 1

        
        for i in magazine:
            if i in hashmap:
                hashmap[i] -= 1

        for i in hashmap:
            if hashmap[i] > 0:
                return False

        return True

#使用defaultdict
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        hashmap = collections.defaultdict(int)
        for i in magazine:
            hashmap[i] += 1
        print(hashmap)

        for i in ransomNote:
            if not hashmap[i]:          #如果hashmap[i]==0说明已经找不到需要的字母，返回False
                print(i,hashmap[i])
                return False

            else:
                print(i,hashmap[i])     
                hashmap[i] -= 1

        return True

#数组法
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        
        record = [0] * 26

        for i in magazine:
            record[ord(i)-ord('a')] += 1            #掌握用数字表示字母的用法

        for i in ransomNote:
            if record[ord(i)-ord('a')] == 0:
                return False

            else:
                record[ord(i)-ord('a')] -= 1

        return True
