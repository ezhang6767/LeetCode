Day 7
第454题.四数相加II
https://leetcode.cn/problems/4sum-ii/
给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。

#dict解法
class Solution:
    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        hashmap = {}
        for n1 in nums1:
            for n2 in nums2:
                if n1 + n2 in hashmap:
                    hashmap[n1+n2] += 1         #更新hashmap里key的value
                else:
                    hashmap[n1+n2] = 1          #创建hashmap,或者用defaultdict
        count = 0
        for n3 in nums3:
            for n4 in nums4:
                if - n3 - n4 in hashmap:        #在hashmap里寻找匹配值
                    count += hashmap[-n3-n4]    #更新计数器    
        return count                            #需要return count


#defaultdict解法        
class Solution:
    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        hashmap = collections.defaultdict(int)  #填入int允许在键不存在时将其初始值设置为0
        for i in nums1:
            for j in nums2:
                hashmap[i+j] += 1
        count = 0    
        for i in nums3:
            for j in nums4:
                count += hashmap[-i-j]

        return count

#使用Counter法
from collections import Counter

class Solution:
    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        counter = Counter()
        count = 0
        # 统计nums1和nums2中元素的和出现的次数
        for num1 in nums1:
            for num2 in nums2:
                counter[num1+num2] += 1
        
        # 检查nums3和nums4中元素的负和是否在counter中出现，如果出现则累加对应的次数
        for num3 in nums3:
            for num4 in nums4:
                complement = -(num3+num4)
                count += counter.get(complement,0)
            """
        在代码中，counter.get(complement, 0)中的0表示在字典counter中获取键complement对应的值。如果键complement存在于字典中，那么就返回对应的值；如果键complement不存在于字典中，那么就返回默认值0。

具体来说，counter.get(complement, 0)的作用是获取字典counter中键complement对应的值，如果键不存在，则返回0。这样做的目的是避免在键不存在时引发KeyError异常，而是返回一个默认值，确保代码的正常执行。

        如果不使用counter.get(complement, 0)，而是直接使用counter[complement]来获取值，当键complement不存在时会引发KeyError异常，需要进行异常处理，增加代码的复杂性。而使用counter.get(complement, 0)则可以更简洁地处理键不存在的情况。
            """
        
        return count
        
        
        
        
        
383. 赎金信        
给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串 ransom 能不能由第二个字符串 magazines 里面的字符构成。如果可以构成，返回 true ；否则返回 false。

(题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。杂志字符串中的每个字符只能在赎金信字符串中使用一次。)
https://leetcode.cn/problems/ransom-note/



#hash法  -- 记录赎金信      
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        hashmap = dict()
        
        for i in ransomNote:
            if i in hashmap:
                hashmap[i] += 1
            else:
                hashmap[i] = 1

        
        for i in magazine:
            if i in hashmap:
                hashmap[i] -= 1

        for i in hashmap:
            if hashmap[i] > 0:
                return False

        return True
#hash法 -- 记录杂志       
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        hashmap = dict()
        
        for i in magazine:
            if i in hashmap:
                hashmap[i] += 1
            else:
                hashmap[i] = 1

        
        for i in ransomNote:
            if i not in hashmap or hashmap[i] == 0:
                return False

            else:
                hashmap[i] -= 1

        return True





#使用defaultdict
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        hashmap = collections.defaultdict(int)
        for i in magazine:
            hashmap[i] += 1
        print(hashmap)

        for i in ransomNote:
            if not hashmap[i]:          #如果hashmap[i]==0说明已经找不到需要的字母，返回False
                print(i,hashmap[i])
                return False

            else:
                print(i,hashmap[i])     
                hashmap[i] -= 1

        return True

#数组法
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        
        record = [0] * 26

        for i in magazine:
            record[ord(i)-ord('a')] += 1            #掌握用数字表示字母的用法

        for i in ransomNote:
            if record[ord(i)-ord('a')] == 0:
                return False

            else:
                record[ord(i)-ord('a')] -= 1

        return True
        
#使用Counter        
from collections import Counter

class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        ransom_counter = Counter(ransomNote)
        magazine_counter = Counter(magazine)

        # 检查ransom_counter中的每个字符在magazine_counter中的出现次数是否大于等于ransom_counter中的出现次数
        for char, count in ransom_counter.items():      #char represents the key of each key-value pair in ransom_counter, and count represents the corresponding value.
            if count > magazine_counter.get(char,0):    #需要使用get function
                return False

        return True




        
第15题. 三数之和

给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。

注意： 答案中不可以包含重复的三元组。

https://leetcode.cn/problems/3sum/

#双指针法
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = []
        n = len(nums)
        nums.sort()
        for i in range(n):
            left = i + 1
            right = n - 1
            #剪枝第一步，假设第一个数大于0直接返回
            if nums[i] > 0:
                break

            if i > 0 and nums[i] == nums[i-1]:     #去重a
                continue

            while left < right:
                total = nums[i] + nums[left] + nums[right]
                if total > 0:
                    right -= 1
                
                elif total < 0:
                    left += 1

                else:
                    res.append([nums[i],nums[left],nums[right]])

                    while left != right and nums[left] == nums[left+1]:     #去重b
                        left += 1

                    while right != left and nums[right] == nums[right-1]:    #去重c
                        right -= 1  

                    left += 1
                    right -= 1

        return res   
        
        
#另一种去重b,c法
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        res = []
        n = len(nums)
        for i in range(n - 2):
            if i > 0 and nums[i] == nums[i - 1]:
                continue
            l, r = i + 1, n - 1
            while l < r:
                s = nums[i] + nums[l] + nums[r]
                if s == 0:
                    res.append([nums[i], nums[l], nums[r]])
                    temp_l, temp_r = nums[l], nums[r]
                    while l < r and nums[l] == temp_l:      #去重b，注意此写法包括了指针右移
                        l += 1
                    while l < r and nums[r] == temp_r:      #去重c，注意此写法包括了指针左移
                        r -= 1
                elif s < 0:
                    l += 1
                else:
                    r -= 1
        return res
        
#hashmap法，去重非常复杂
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        dic = {}
        res = []
        for i in range(len(nums)):
            if nums[i] not in dic:
                dic[nums[i]] = 1
            else:
                dic[nums[i]] += 1
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                if 0 - nums[i] - nums[j] in dic:
                
                     '''当0-nums[i]-nums[j]等于nums[i]时，如果nums[i]出现次数小于2，则说明这个三元组不符合题意；
                        当0-nums[i]-nums[j]等于nums[j]时，如果nums[j]出现次数小于2，则说明这个三元组不符合题意；
                        当0-nums[i]-nums[j]不等于nums[i]且不等于nums[j]时，说明这个三元组符合题意。
                        如果上述条件任意一个满足，则将这个三元组加入结果列表中。

                        最后，对结果列表进行排序，并去重。'''
                    
                    if (0 - nums[i] - nums[j] == nums[i] and dic[nums[i]] >= 2) or (0 - nums[i] - nums[j] == nums[j] and dic[nums[j]] >= 2) or (0 - nums[i] - nums[j] != nums[i] and 0 - nums[i] - nums[j] != nums[j]):
                        tmp = [nums[i], nums[j], 0 - nums[i] - nums[j]]
       
                        tmp.sort()      #如果不对结果列表tmp进行排序，那么将无法确定结果列表中相同的三元组。因此，不排序的话，可能会得到重复的结果，无法正确去重。
                        if tmp not in res:
                            res.append(tmp)
        return res


                                   
第18题. 四数之和

题意：给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。

注意：
答案中不可以包含重复的四元组。                        
https://leetcode.cn/problems/4sum/description/                        

class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()
        res = []
        n = len(nums)
        for i in range(n):
            if i > 0 and nums[i] == nums[i-1]:                  #对i的剪枝
                continue

            for k in range(i+1, n):
                if k > i+1 and nums[k] == nums[k-1]:            #对k的剪枝
                    continue

                p = k + 1
                q = n -1

                while p < q:
                    if nums[i] + nums[k] + nums[p] + nums[q] > target:  
                        q -= 1

                    elif nums[i] + nums[k] + nums[p] + nums[q] < target:    
                        p += 1

                    else:
                        res.append([nums[i], nums[k], nums[p], nums[q]])

                        while p < q and nums[p] == nums[p+1]:       #对p剪枝
                            p += 1

                        while p > q and nums[q] == nums[q-1]:       #对q剪枝
                            q -= 1
                        p += 1          #此时还是处于else的相等条件下，所以需要移动指针
                        q -= 1

        return res

    
            
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()  # 先对数组进行排序
        result = []
        
        for i in range(len(nums) - 3):
            # 跳过重复的元素
            if i > 0 and nums[i] == nums[i-1]:
                continue
            
            for j in range(i+1, len(nums) - 2):
                # 跳过重复的元素
                if j > i+1 and nums[j] == nums[j-1]:
                    continue
                
                left = j + 1
                right = len(nums) - 1
                
                while left < right:
                    # 计算四数之和
                    total = nums[i] + nums[j] + nums[left] + nums[right]
                    
                    if total < target:
                        left += 1
                    elif total > target:
                        right -= 1
                    else:
                        # 找到一组满足条件的解
                        result.append([nums[i], nums[j], nums[left], nums[right]])
                        
                        # 跳过重复的元素
                        while left < right and nums[left] == nums[left+1]:
                            left += 1
                        while left < right and nums[right] == nums[right-1]:
                            right -= 1
                        
                        left += 1
                        right -= 1
        
        return result



                 
