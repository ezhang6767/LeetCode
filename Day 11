20. 有效的括号
https://leetcode.cn/problems/valid-parentheses/

给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。

解题分析：
这里有三种不匹配的情况:
1. 字符串里左方向的括号多余了
2. 字符串里右方向的括号多余了，所以不匹配
3. 括号没有多余，但是括号的类型没有匹配上

#使用stack

class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        for item in s:
            if item == '(':
                stack.append(')')
            
            elif item == '[':
                stack.append(']')

            elif item == '{':
                stack.append('}')

            elif not stack or item != stack[-1]: #如果栈为空，说明没有左括号与当前右括号匹配
                return False    #因此返回 False

            else:
                stack.pop()

        return len(stack) == 0
        #return not stack
        #return True if not stack else False
        
#使用字典   
class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {
            '(':')',
            '[':']',
            '{':'}'
        }
        for item in s:
            if item in mapping.keys():        #也可以写成in mapping
                stack.append(mapping[item])
            
            elif not stack or stack[-1] != item:
                return False

            else:
                stack.pop()

        return not stack
#字典写法2
def isValid(s: str) -> bool:
    stack = []
    mapping = {')': '(', ']': '[', '}': '{'}

    for char in s:
        if char in mapping:  # 右括号
            if not stack or stack[-1] != mapping[char]:
                return False
            stack.pop()
        else:  # 左括号
            stack.append(char)

    return len(stack) == 0

1047. 删除字符串中的所有相邻重复项
https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/


解题思路：
使用栈来解决这个问题。遍历字符串 s，对于每个字符，如果栈为空或栈顶元素与当前字符不相同，将当前字符压入栈中；
如果栈顶元素与当前字符相同，说明出现了重复项，将栈顶元素弹出。最后，将栈中的元素依次弹出并拼接成最终的字符串结果。
# 方法一，使用栈
def removeDuplicates(s: str) -> str:
    stack = []
    
    for char in s:
        if stack and stack[-1] == char:
            stack.pop()
        else:
            stack.append(char)

    return ''.join(stack)


# 方法二，使用双指针模拟栈，如果不让用栈可以作为备选方法。
class Solution:
    def removeDuplicates(self, s: str) -> str:
        res = list(s)
        slow = fast = 0
        length = len(res)

        while fast < length:
            # 如果一样直接换，不一样会把后面的填在slow的位置
            res[slow] = res[fast]
            
            # 如果发现和前一个一样，就退一格指针
            if slow > 0 and res[slow] == res[slow - 1]:
                slow -= 1
            else:
                slow += 1
            fast += 1
            
        return ''.join(res[0: slow])

150. 逆波兰表达式求值
https://leetcode.cn/problems/evaluate-reverse-polish-notation/

逆波兰表达式：是一种后缀表达式，所谓后缀就是指运算符写在后面。

平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。

该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。

逆波兰表达式主要有以下两个优点：

去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。

适合用栈操作运算：遇到数字则入栈；遇到运算符则取出栈顶两个数字进行计算，并将结果压入栈中。

#常规解法
class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        operators = set(['+','-','*','/'])

        for token in tokens:
            if token not in operators:
                stack.append(int(token))    #result不是int所以要转化为int
            
            else:
                num2 = stack.pop()
                num1 = stack.pop()

                if token == '+':
                    result = num1 + num2

                elif token == '-':
                    result = num1 - num2

                elif token == '*':
                    result = num1 * num2

                else:
                    result = int(num1 / num2) #两个整数之间的除法总是 向零截断 所以不能用整除运算符//

                stack.append(result)

        return stack[0]                 #如果直接return stack会有[]
        
#使用eval解法
stack = []

class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        for item in tokens:
            if item not in {'+','-','*','/'}:
                stack.append(item)
            
            else:
                num2, num1 = stack.pop(), stack.pop() # 第一个出来的是num2
                stack.append(int(eval(f'{num1}{item}{num2}'))) #需要转化成int以满足题目要求
        
        return int(stack.pop()) # 如果一开始只有一个数，那么会是字符串形式的


这个解法使用了栈来求解逆波兰表达式，其中每个元素都是字符串类型的。以下是对该解法的详细解释：

创建一个空栈 stack，用于存储操作数或中间结果。
对于逆波兰表达式中的每个元素 item：
如果 item 不是运算符（即不是 "+", "-", "*", "/"），则将其视为操作数，并将其压入栈 stack 中。
如果 item 是运算符，则从栈 stack 中弹出两个操作数 first_num 和 second_num。注意，在逆波兰表达式中，第一个弹出的操作数是第二个操作数运算时位于运算符后面的那个操作数。
使用 eval() 函数计算出 second_num、item 和 first_num 的表达式的值，并将结果转换为整数类型。这里使用了 eval() 函数来动态地计算表达式的值。
将计算结果压入栈 stack 中，作为中间结果。
循环结束后，栈 stack 中最后剩下的元素即为最终的计算结果。将其弹出，并将结果转换为整数类型后返回。
需要注意的是，由于题目描述中指出表达式总是可以求值并且没有除数为0的情况，因此在此解法中没有对这些特殊情况进行处理。

此外，如果一开始只有一个数，那么在运算结束后，栈 stack 中仍然会保留该数，但以字符串形式存在。为了确保返回整数类型的结果，将栈顶元素使用 int() 函数转换为整数后返回。

这种解法利用了 Python 的动态特性，使用 eval() 函数直接计算表达式的值，简化了运算符的处理过程。但需要注意，在实际应用中，eval() 函数的使用可能会带来一些安全风险，因为它允许执行任意的表达式。因此，在面对不可信的输入时，需要谨慎使用 eval() 函数。
        
        
