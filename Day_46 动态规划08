139. 单词拆分
https://leetcode.cn/problems/word-break/description/


#动态规划
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        wordSet = set(wordDict)
        n = len(s)
        dp = [False] * (n + 1)  # dp[i] 表示字符串的前 i 个字符是否可以被拆分成单词
        dp[0] = True  # 初始状态，空字符串可以被拆分成单词

        for i in range(1, n + 1): # 遍历背包
            for j in range(i): # 遍历单词
                if dp[j] and s[j:i] in wordSet:
                    dp[i] = True  # 如果 s[0:j] 可以被拆分成单词，并且 s[j:i] 在单词集合中存在，则 s[0:i] 可以被拆分成单词
                    break

        return dp[n]

#回溯（超时）
class Solution:
    def backtracking(self, s: str, wordSet: set[str], startIndex: int) -> bool:
        # 边界情况：已经遍历到字符串末尾，返回True
        if startIndex >= len(s):
            return True

        # 遍历所有可能的拆分位置
        for i in range(startIndex, len(s)):
            word = s[startIndex:i + 1]  # 截取子串
            if word in wordSet and self.backtracking(s, wordSet, i + 1):
                # 如果截取的子串在字典中，并且后续部分也可以被拆分成单词，返回True
                return True

        # 无法进行有效拆分，返回False
        return False

    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        wordSet = set(wordDict)  # 转换为哈希集合，提高查找效率
        return self.backtracking(s, wordSet, 0)

#回溯（AC）
class Solution:
    def wordBreak(self, s, wordDict):
        wordSet = set(wordDict)
        memory = [True] * len(s)  # True表示初始化状态

        def backtracking(startIndex):
            if startIndex >= len(s):
                return True
            # 如果memory[startIndex]不是初始值了，直接使用memory[startIndex]的结果
            if not memory[startIndex]:
                return memory[startIndex]
            for i in range(startIndex, len(s)):
                word = s[startIndex:i + 1]
                if word in wordSet and backtracking(i + 1):
                    return True
            memory[startIndex] = False  # 记录以startIndex开始的子串是不可以被拆分的
            return False

        return backtracking(0)


#回溯法：将函数定义为类的成员时，但是又不希望它们在同一个方法内嵌套时
class Solution:
    def backtracking(self, s, wordSet, memory, startIndex):
        if startIndex >= len(s):
            return True
        # 如果memory[startIndex]不是初始值了，直接使用memory[startIndex]的结果
        if not memory[startIndex]:
            return memory[startIndex]
        for i in range(startIndex, len(s)):
            word = s[startIndex:i + 1]
            if word in wordSet and self.backtracking(s, wordSet, memory, i + 1):
                return True
        memory[startIndex] = False  # 记录以startIndex开始的子串是不可以被拆分的
        return False

    def wordBreak(self, s, wordDict):
        wordSet = set(wordDict)
        memory = [True] * len(s)  # True表示初始化状态
        return self.backtracking(s, wordSet, memory, 0)
