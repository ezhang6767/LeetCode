第二章 链表  

链表理论基础

链表初始化：

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
        


203.移除链表元素

题意：删除链表中等于给定值 val 的所有节点。

https://leetcode.cn/problems/remove-linked-list-elements/

解题思路：

1.直接使用原来的链表来进行删除操作。

链表的其他节点可以通过前一个节点来移除当前节点，但是移除头结点和移除其他节点的操作不一样，没有前节点。

所以头结点的移除需要将头结点向后移动一位，（然后将头结点从内存中删除），需要单独写一段逻辑处理头结点。

2.设置一个虚拟头结点在进行删除操作。

设置一个虚拟头结点，这样原链表的所有节点就都可以按照统一的方式进行移除了。

结尾return dummyNode.next 才是新的头结点


#虚拟头结点

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
        """初始条件 self.val = val 和 self.next = next 是在类的构造函数 __init__ 中设置节点对象的初始状态。

            self.val = val 将传入的值 val 赋给节点对象的 val 属性，用于存储节点的值。

            self.next = next 则将传入的 next 赋给节点对象的 next 属性，用于指向链表中的下一个节点。
            
            通过在构造函数中设置这些初始条件，我们可以在创建节点对象时指定节点的值和下一个节点的引用。
            
            例如：要创建一个节点对象，值为 5，且 next 属性为 288，可以按以下方式创建：
            
            node = ListNode(5, ListNode(288))
            
            在这里，我们调用 ListNode 类的构造函数，并传递两个参数。第一个参数是节点的值，即 5。第二个参数是一个新的 ListNode 对象，其中节点的值为 288。
            
            这样，我们就创建了一个节点对象，其值为 5，且 next 属性指向另一个节点，其值为 288。

            请注意，在链表中，每个节点的 next 属性应该是指向下一个节点的引用，而不是直接使用下一个节点的值。因此，next 属性应该指向下一个节点对象，而不是节点值本身。"""        
        
        
        
class Solution:
    def removeElements(self, head: ListNode, val: int) -> ListNode:
        dummyHead = ListNode(next=head) #添加一个虚拟节点
        cur = dummyHead
        while cur.next:
        
        """while cur.next: 是一个循环条件，意味着当 cur.next 存在时（即不为 None），循环将继续执行。

            在这个特定的代码片段中，cur 是一个用于遍历链表的变量，cur.next 表示当前节点的下一个节点。循环条件 while cur.next: 的含义是，只要当前节点的下一个节点存在（即链表尚未到达末尾），循环将一直执行。

            循环体内的代码会根据当前节点的值进行一些操作，并将 cur 移动到链表中的下一个节点。如果 cur.next 为 None，则表示已经到达链表的末尾，循环将终止。

            换句话说，while cur.next: 是用于遍历链表并进行相应处理的循环条件。它确保在链表尚未遍历完全之前，代码会继续执行循环体内的操作。"""
            
            if cur.next.val == val:
                cur.next = cur.next.next #删除cur.next节点
            else:
                cur = cur.next
                
        """cur = cur.next 是将变量 cur 更新为当前节点的下一个节点。

            在给定的代码片段中，cur 是一个用于遍历链表的变量。通过执行 cur = cur.next，将 cur 更新为当前节点的下一个节点。这样可以实现遍历链表的操作，将 cur 逐步移动到链表中的下一个节点。

            例如，在 while 循环中，首先将 cur 初始化为哑节点 dummyHead，然后通过 cur = cur.next 来不断移动 cur，直到 cur.next 为 None，表示已经到达链表的末尾。

            这种操作可以用于遍历链表，并在需要时对节点进行处理或执行其他操作。通过更新 cur，可以逐步访问链表中的每个节点。"""
            
        return dummyHead.next
        

#用原来的链表操作

#写法一：

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
        
class Solution:
    def removeElements(self, head: ListNode, val: int) -> ListNode:
        while head and head.val == val:
            #temp = head
            head = head.next

        if not head:
            return head         #如果head为None，无法给cur赋值
        
        pre = head
        cur = head.next
        
        while pre and cur:
            if cur.val == val:
                pre.next = cur.next
                
            else:
                pre = cur
            cur = cur.next
                
        return head


#写法二：

class Solution:
    def removeElements(self, head: ListNode, val: int) -> ListNode:

        
        
        while head and head.val == val:
            #temp = head
            head = head.next
        #return head                    #此时如果return head， 下面的while循环将不再判断。需要特别注意。
        cur = head

        while cur and cur.next:         #排除了head为空的情况
            if cur.next.val == val:
                cur.next = cur.next.next
                
            else:
                cur = cur.next


                
        return head        
        

总结： 虽然实际操作中使用dummyHead写法，常规操作非常考验细节。


707.设计链表

https://leetcode.cn/problems/design-linked-list/

设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next.val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。

在链表类中实现这些功能：

get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。
addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。
addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。
addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。
deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。

注意事项：
1.需要记录链表的长度，以便于后续操作
2.增删Node后需要更新链表的长度
3.增加节点需要先链接后节点，再链接前节点。

#单链表

class Node(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class MyLinkedList:

    def __init__(self):
        self.head = Node()
        self.size = 0       # 设置一个链表长度的属性，便于后续操作，注意每次增和删的时候都要更新


    def get(self, index: int) -> int:
        if index < 0 or index >= self.size:
            return -1
        cur = self.head.next
        while index:
            cur = cur.next
            index -= 1
        return cur.val


    def addAtHead(self, val: int) -> None:
        newNode = Node(val)                 #定义新节点
        newNode.next = self.head.next       #链接新节点的后半段，以防止断链后丢失
        self.head.next = newNode            #链接前一节点和新节点
        self.size += 1                      #长度+1



    def addAtTail(self, val: int) -> None:
        newNode = Node(val)                 #定义新节点
        cur = self.head                     #定义头结点
        while cur.next:                     #遍历
            cur = cur.next
        cur.next = newNode                  #链接末尾节点
        self.size += 1                      #长度+1


    def addAtIndex(self, index: int, val: int) -> None:
        if index < 0:
            self.addAtHead(val)
            return

        if index == self.size:
            self.addAtTail(val)
            return

        if index > self.size:
            return


        node = Node(val)
        pre = self.head
        while index:
            pre = pre.next
            index -= 1          #找到定位点

        node.next = pre.next    #链接新节点和下一节点，以防止断链后丢失
        pre.next = node         #前一节点和新节点链接
        self.size += 1          #长度+1

    def deleteAtIndex(self, index: int) -> None:
        if index < 0 or index >= self.size:
            return

        pre = self.head
        while index:                #遍历
            pre = pre.next
            index -= 1              #找到定位点
        pre.next = pre.next.next    #删除
        self.size -= 1              #长度-1



# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)



#双链表
class Node:
    def __init__(self,val):
        self.val = val
        self.prev = None
        self.next = None
        

class MyLinkedList:
    
    def __init__(self):
        self._head, self._tail = Node(0), Node(0)                   #虚拟节点
        self._head.next, self._tail.prev = self._tail, self._head     #从头往后，从后往前链接
        self._count = 0
        
    def _get_node(self, index: int) -> Node:
        if index >= self._count // 2:
            node = self._tail
            for _ in range(self._count - index):
                node = node.prev                                    #当index大于_count // 2时， 从后往前查找更快
                
                
        else:
            node = self._head
            for _ in range(index + 1):
                node = node.next
                
        return node
        

    def get(self, index: int) -> int:
        
        if 0 <= index < self._count:
            node = self._get_node(index)
            return node.val
        
        else:
            return -1
            
    def _update(self, prev:Node, next:Node, val:int) -> None:
        self._count += 1
        node = Node(val)
        prev.next, next.prev = node, node
        node.prev, node.next = prev, next
            
    def addAtHead(self, val:int) -> None:
        self._update(self._head, self._head.next, val)
    
    def addAtTail(self, val:int) -> None:
        self._update(self._tail.prev, self._tail, val)
        
    def addAtIndex(self, index:int, val:int) -> None:
        if index < 0:
            index = 0
            
        elif index > self._count:
            return
        
        node = self._get_node(index)
        self._update(node.prev, node, val)
        
    def deleteAtIndex(self, index:int) -> None:
        if 0 <= index < self._count:
            node = self._get_node(index)
            self._count -= 1
            node.prev.next, node.next.prev = node.next, node.prev



206.反转链表

https://leetcode.cn/problems/reverse-linked-list/

题意：反转一个单链表。

注意事项：
1. 看不懂就画图

https://excalidraw.com/#json=OBZsMa3Af86X0MxfB4Ou8,TlSIGtKrcV05gFI8re1Xcg


#方法一：双指针/迭代

我们使用三个指针，分别指向当前节点、其前一个节点和其后一个节点。
在遍历链表的过程中，将当前节点的指针指向前一个节点，然后更新三个指针的位置，继续向后遍历。最后返回新的头节点。



class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        cur = head
        pre = None
        while cur:
            temp = cur.next         #保存cur后面节点
            cur.next = pre          #翻转链接
            pre = cur               #pre ++
            cur = temp              #cur ++
    """
    在方法一中，prev = cur 的作用是将当前节点 cur 的引用赋值给 prev 变量。这样做的目的是在反转链表的过程中，
    
    将当前节点的指针指向前一个节点，因为反转后当前节点会变成前一个节点。

    而 cur = nxt 的作用是将下一个节点 nxt 的引用赋值给 cur 变量，更新当前节点为下一个节点，继续向后遍历链表。

    具体来说，我们使用三个指针来进行链表的反转：prev、cur 和 nxt。

    首先，将 cur.next 的引用保存在 nxt 中，以便在反转后能够访问到下一个节点。
    
    然后，将 cur.next 指向 prev，即将当前节点的指针指向前一个节点，实现反转。
    
    接下来，更新指针的位置，将 prev 更新为 cur，将 cur 更新为 nxt，继续向后遍历链表。
    
    重复上述步骤，直到遍历完整个链表，最后返回反转后的新头节点 prev。
    
    通过这种方式，我们不断将当前节点的指针指向前一个节点，实现了链表的反转。
    """            
            
            
            
        return pre                  #返回pre
    """ 
    返回 pre 是因为在链表反转完成后，pre 指向的是反转后的链表的头节点。由于原始链表已经被反转，所以原始链表的尾节点成为了反转后链表的头节点。

    在循环过程中，pre 不断向后移动，最终指向原始链表的最后一个节点，即反转后链表的头节点。

    因此，返回 pre 就是返回了反转后的链表的头节点，以便在函数调用结束后能够获取到链表的新头节点。

    注意，在方法一中，我们在进入循环之前先进行了一个判断，即判断链表是否为空或者只有一个节点。如果链表为空或只有一个节点，则直接返回原链表，不进行反转操作，因为在这种情况下，原链表已经是反转后的链表。

    所以，在方法一的最后返回 pre，即返回反转后链表的头节点。
    
    如果在方法一中返回 cur，会返回反转后链表的尾节点而不是头节点。

    在循环结束时，cur 指向原始链表的最后一个节点，即反转后链表的尾节点。如果返回 cur，那么返回的是反转后链表的尾节点，并不是我们期望的头节点。

    而 pre 是在循环中不断向后移动的指针，最终指向原始链表的最后一个节点，即反转后链表的头节点。所以应该返回 pre，才能正确返回反转后链表的头节点。
    
    """        
        
        
#递归法
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head
        
        new_head = self.reverseList(head.next)
        head.next.next = head
        head.next = None
        return new_head
        """        
        当使用递归反转单链表时，每一步的操作如下所示：

        1.首先，我们检查输入的头节点是否为空或者下一个节点为空。如果满足其中一个条件，说明当前节点是链表的最后一个节点或者链表为空，无需反转，直接返回当前节点。

        2.对于非空链表，我们递归调用 reverseList 函数，将当前节点的下一个节点作为输入参数，以反转子链表。

        3.递归调用会一直进行，直到遇到最后一个节点，此时会返回最后一个节点，作为子链表的新头节点。

        4.在递归的回溯过程中，我们得到了子链表的新头节点 new_head。

        5.接下来，我们将当前节点的下一个节点的指针指向当前节点，实现反转操作。也就是 head.next.next = head，这样当前节点就变成了下一个节点的后继节点。

        6.然后，我们将当前节点的指针指向None，断开与原先的后继节点的连接，防止形成环。也就是 head.next = None。
          第6步的目的是断开当前节点与原先的后继节点的连接，防止在反转后形成循环。如果不进行这一步操作，链表将保持原来的连接关系，导致反转后的链表出现环形。

        7.最后，我们返回新的头节点 new_head，作为反转后的链表的头节点。

        通过递归的方式，我们可以反转整个链表，并返回新的头节点。注意，在递归的过程中，我们修改了链表节点的指向关系，实现了反转。        
        """
       
            
            






