第二章 链表  

链表理论基础

链表初始化：

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
        


203.移除链表元素

题意：删除链表中等于给定值 val 的所有节点。

https://leetcode.cn/problems/remove-linked-list-elements/

解题思路：

1.直接使用原来的链表来进行删除操作。

链表的其他节点可以通过前一个节点来移除当前节点，但是移除头结点和移除其他节点的操作不一样，没有前节点。

所以头结点的移除需要将头结点向后移动一位，（然后将头结点从内存中删除），需要单独写一段逻辑处理头结点。

2.设置一个虚拟头结点在进行删除操作。

设置一个虚拟头结点，这样原链表的所有节点就都可以按照统一的方式进行移除了。

结尾return dummyNode.next 才是新的头结点


#虚拟头结点

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def removeElements(self, head: ListNode, val: int) -> ListNode:
        dummyHead = ListNode(next=head) #添加一个虚拟节点
        cur = dummyHead
        while cur.next:
            if cur.next.val == val:
                cur.next = cur.next.next #删除cur.next节点
            else:
                cur = cur.next
        return dummyHead.next
        

#用原来的链表操作

#写法一：

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
        
class Solution:
    def removeElements(self, head: ListNode, val: int) -> ListNode:
        while head and head.val == val:
            #temp = head
            head = head.next

        if not head:
            return head         #如果head为None，无法给cur赋值
        
        pre = head
        cur = head.next
        
        while pre and cur:
            if cur.val == val:
                pre.next = cur.next
                
            else:
                pre = cur
            cur = cur.next
                
        return head


#写法二：

class Solution:
    def removeElements(self, head: ListNode, val: int) -> ListNode:

        
        
        while head and head.val == val:
            #temp = head
            head = head.next
        #return head                    #此时如果return head， 下面的while循环将不再判断。需要特别注意。
        cur = head

        while cur and cur.next:         #排除了head为空的情况
            if cur.next.val == val:
                cur.next = cur.next.next
                
            else:
                cur = cur.next


                
        return head        
        

总结： 虽然实际操作中使用dummyHead写法，常规操作非常考验细节。


707.设计链表

https://leetcode.cn/problems/design-linked-list/

设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。

在链表类中实现这些功能：

get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。
addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。
addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。
addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。
deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。

注意事项：
1.需要记录链表的长度，以便于后续操作
2.增删Node后需要更新链表的长度
3.增加节点需要先链接后节点，再链接前节点。

#单链表

class Node(object):
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class MyLinkedList:

    def __init__(self):
        self.head = Node()
        self.size = 0       # 设置一个链表长度的属性，便于后续操作，注意每次增和删的时候都要更新


    def get(self, index: int) -> int:
        if index < 0 or index >= self.size:
            return -1
        cur = self.head.next
        while index:
            cur = cur.next
            index -= 1
        return cur.val


    def addAtHead(self, val: int) -> None:
        newNode = Node(val)                 #定义新节点
        newNode.next = self.head.next       #链接新节点的后半段，以防止断链后丢失
        self.head.next = newNode            #链接前一节点和新节点
        self.size += 1                      #长度+1



    def addAtTail(self, val: int) -> None:
        newNode = Node(val)                 #定义新节点
        cur = self.head                     #定义头结点
        while cur.next:                     #遍历
            cur = cur.next
        cur.next = newNode                  #链接末尾节点
        self.size += 1                      #长度+1


    def addAtIndex(self, index: int, val: int) -> None:
        if index < 0:
            self.addAtHead(val)
            return

        if index == self.size:
            self.addAtTail(val)
            return

        if index > self.size:
            return


        node = Node(val)
        pre = self.head
        while index:
            pre = pre.next
            index -= 1          #找到定位点

        node.next = pre.next    #链接新节点和下一节点，以防止断链后丢失
        pre.next = node         #前一节点和新节点链接
        self.size += 1          #长度+1

    def deleteAtIndex(self, index: int) -> None:
        if index < 0 or index >= self.size:
            return

        pre = self.head
        while index:                #遍历
            pre = pre.next
            index -= 1              #找到定位点
        pre.next = pre.next.next    #删除
        self.size -= 1              #长度-1



# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)



#双链表
class Node:
    def __init__(self,val):
        self.val = val
        self.prev = None
        self.next = None
        

class MyLinkedList:
    
    def __init__(self):
        self._head, self._tail = Node(0), Node(0)                   #虚拟节点
        self._head.next, self._tail.prev = self._tail, self._head     #从头往后，从后往前链接
        self._count = 0
        
    def _get_node(self, index: int) -> Node:
        if index >= self._count // 2:
            node = self._tail
            for _ in range(self._count - index):
                node = node.prev                                    #当index大于_count // 2时， 从后往前查找更快
                
                
        else:
            node = self._head
            for _ in range(index + 1):
                node = node.next
                
        return node
        

    def get(self, index: int) -> int:
        
        if 0 <= index < self._count:
            node = self._get_node(index)
            return node.val
        
        else:
            return -1
            
    def _update(self, prev:Node, next:Node, val:int) -> None:
        self._count += 1
        node = Node(val)
        prev.next, next.prev = node, node
        node.prev, node.next = prev, next
            
    def addAtHead(self, val:int) -> None:
        self._update(self._head, self._head.next, val)
    
    def addAtTail(self, val:int) -> None:
        self._update(self._tail.prev, self._tail, val)
        
    def addAtIndex(self, index:int, val:int) -> None:
        if index < 0:
            index = 0
            
        elif index > self._count:
            return
        
        node = self._get_node(index)
        self._update(node.prev, node, val)
        
    def deleteAtIndex(self, index:int) -> None:
        if 0 <= index < self._count:
            node = self._get_node(index)
            self._count -= 1
            node.prev.next, node.next.prev = node.next, node.prev



206.反转链表

https://leetcode.cn/problems/reverse-linked-list/

题意：反转一个单链表。

#双指针

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        cur = head
        pre = None
        while cur:
            temp = cur.next
            cur.next = pre
            pre = cur
            cur = temp
        return pre    
        
#递归法
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        def reverse(pre, cur):
            if not cur:
                return pre
                
            tmp = cur.next
            cur.next = pre
            
            return reverse(cur, tmp)
            
        return reverse(None,head)    
       
            
            






