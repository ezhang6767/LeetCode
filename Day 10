第五章 栈与队列

1. C++中stack 是容器么？
在C++中，stack 是一个容器适配器，而不是一个容器。它通过包装底层容器实现堆栈的行为。stack 提供了一种LIFO（后进先出）的数据结构，其中只能从顶部添加和删除元素。

2. 我们使用的stack是属于哪个版本的STL？
stack 属于C++的标准模板库（STL），但它不是STL的一部分。它被定义在头文件 <stack> 中。

3. 我们使用的STL中stack是如何实现的？
stack 在实现上可以使用各种底层容器，例如 deque、list 或 vector。默认情况下，stack 使用 deque 作为其默认底层容器。
也可以通过显式指定底层容器类型来创建 stack，例如 stack<int, vector<int>>。

4. stack 提供迭代器来遍历stack空间么？
stack 并不提供迭代器来遍历整个堆栈空间。由于其设计为LIFO结构，访问元素的顺序是限制在栈顶的。
你只能通过 top() 方法访问栈顶元素，而不能直接遍历整个堆栈。如果你需要遍历堆栈的所有元素，你需要使用循环或递归来多次调用 top() 和 pop() 方法来逐个访问并移除元素。

5. 在pthon里面， 栈和队列是什么样的？

栈（Stack）：在 Python 中，你可以使用列表（List）来实现栈。通过使用 append() 方法将元素添加到列表的末尾，并使用 pop() 方法从列表的末尾移除元素，可以模拟栈的后进先出（LIFO）行为。

例如：

python
Copy code
stack = []
stack.append(1)  # 入栈
stack.append(2)
stack.append(3)
print(stack.pop())  # 出栈，输出：3
print(stack.pop())  # 出栈，输出：2

队列（Queue）：在 Python 中，你可以使用 collections 模块中的 deque 类来实现队列。deque 是双端队列（Double-ended Queue）的缩写，它支持在队列的两端进行快速的插入和删除操作。你可以使用 append() 方法将元素添加到队列的末尾，使用 popleft() 方法从队列的开头移除元素，以模拟队列的先进先出（FIFO）行为。

例如：

python
Copy code
from collections import deque

queue = deque()
queue.append(1)  # 入队
queue.append(2)
queue.append(3)
print(queue.popleft())  # 出队，输出：1
print(queue.popleft())  # 出队，输出：2

6. vector是python中的list吗？两者有什么区别？

在 Python 中，list 是内置的容器类型，用于存储和操作多个元素。而 C++ 中的 vector 是标准模板库（STL）中的容器类型，也用于存储和操作多个元素。

虽然 list 和 vector 在某些方面有相似之处，但它们也有一些区别：

1. 语言环境：list 是 Python 的内置类型，而 vector 是 C++ 的标准库类型。

2. 动态类型 vs. 静态类型：Python 是一种动态类型语言，list 可以存储不同类型的元素。而 C++ 是一种静态类型语言，vector 被定义为特定类型的容器，只能存储相同类型的元素。

3. 内存管理：Python 的 list 是动态数组，内存管理由解释器自动处理。而 C++ 的 vector 也是动态数组，但它使用手动内存管理，即需要开发者负责手动分配和释放内存。

4. 性能差异：由于 Python 是一种解释型语言，与 C++ 相比，Python 的执行速度通常较慢。因此，在大型数据集或对性能要求较高的场景中，C++ 的 vector 通常具有更好的性能。

需要注意的是，尽管 list 和 vector 在名称和功能上有一些相似之处，但它们是不同的概念和实现。在 Python 中，你应该使用 list，而在 C++ 中，你应该使用 vector。


232.用栈实现队列

https://leetcode.cn/problems/implement-queue-using-stacks/

使用栈实现队列的下列操作：

push(x) -- 将一个元素放入队列的尾部。
pop() -- 从队列首部移除元素。
peek() -- 返回队列首部的元素。
empty() -- 返回队列是否为空。

解法：

使用两个栈，一个作为输入栈，一个作为输出栈。push操作时将元素加入输入栈，pop/peek操作时判断输出栈是否为空，
如果为空则将输入栈中的所有元素逐个取出并加入输出栈中，再进行操作。这样保证了输出栈中的元素顺序即为队列中的顺序。

class MyQueue:

    def __init__(self):
        self.stack_in = []          #in for push
        self.stack_out = []         #out for pop



    def push(self, x: int) -> None:
        self.stack_in.append(x)

    def pop(self) -> int:
        """
        Removes the element from in front of queue and returns that element.
        """
        if self.empty():
            return None
        if self.stack_out:
            return self.stack_out.pop()
        else:
            for i in range(len(self.stack_in)):
                self.stack_out.append(self.stack_in.pop())
            return self.stack_out.pop()

    def peek(self) -> int:
        """Get the front element."""
        if not self.stack_out:              #判断输出栈是否为空
            while self.stack_in:            #如果输出栈为空，则将输入栈中的所有元素逐个取出并加入输出栈中：
                self.stack_out.append(self.stack_in.pop())
        return self.stack_out[-1]           #返回输出栈的栈顶元素(最后加入的)


    def empty(self) -> bool:
        return not (self.stack_in or self.stack_out)



# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()



225. 用队列实现栈

https://leetcode.cn/problems/implement-stack-using-queues/
使用队列实现栈的下列操作：

push(x) -- 元素 x 入栈
pop() -- 移除栈顶元素
top() -- 获取栈顶元素
empty() -- 返回栈是否为空

from collections import deque

class MyStack:

    def __init__(self):
        self.queue_in = deque()             #store all data
        self.queue_out = deque()            #store data when pop


    def push(self, x: int) -> None:
        self.queue_in.append(x)             #use append directly


    def pop(self) -> int:
        """
        1. 首先确认不空
        2. 因为队列的特殊性，FIFO，所以我们只有在pop()的时候才会使用queue_out
        3. 先把queue_in中的所有元素（除了最后一个），依次出列放进queue_out
        4. 交换in和out，此时out里只有一个元素
        5. 把out中的pop出来，即是原队列的最后一个
        
        tip：这不能像栈实现队列一样，因为另一个queue也是FIFO，如果执行pop()它不能像
        stack一样从另一个pop()，所以干脆in只用来存数据，pop()的时候两个进行交换
        """
        if self.empty():
            return None
        
        for i in range(len(self.queue_in) - 1):
            self.queue_out.append(self.queue_in.popleft())

        self.queue_in, self.queue_out = self.queue_out, self.queue_in
        return self.queue_out.popleft()         #此时out只剩一个元素

    def top(self) -> int:
        if self.empty():
            return None                         #确认不空
        
        return self.queue_in[-1]                #仅有in会存放数据，返回第一个


    def empty(self) -> bool:

        return len(self.queue_in) == 0          #只需要判断in是不是有数据


