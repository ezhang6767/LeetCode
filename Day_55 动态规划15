 392.判断子序列 
https://leetcode.cn/problems/is-subsequence/

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        #dp[i][j]: 以i-1,j-1为结尾的子串的最大公共子序列
        #if s[i-1]==t[j-1],dp[i][j]=dp[i-1][j-1] + 1
        #if s[i-1]!=t[j-1], dp[i][j]=dp[i][j-1] (相当于比较s[i-1]和t[j-2])
        #初始化dp[0][j],[i][0] == 0
        #确定遍历顺序，从左到右，从上到下
        #打印dp数组
        #以下极限值判断可有可无不影响AC
        if not s:
            return True
        if not t and s:
            return False


        dp = [[0] * (len(t)+1) for _ in range(len(s)+1)]

        for i in range(1,len(s)+1):
            for j in range(1,len(t)+1):
                if s[i-1]==t[j-1]:
                    dp[i][j] = dp[i-1][j-1]+1
                
                elif s[i-1]!=t[j-1]:
                    dp[i][j] = dp[i][j-1]

        if dp[-1][-1] == len(s):
            return True

        return False

115.不同的子序列 
https://leetcode.cn/problems/distinct-subsequences/description/
class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        #dp[i][j]: 以i-1,j-1结尾的字符串s和t的中t出现的个数。
        #当s[i-1]==t[j-1]的时候，有2种情况。1.取s[i-1]: dp[i-1][j-1] 2.不取s[i-1]:dp[i-1][j] 
        #当s[i-1]!=t[j-1]的时候，dp[i][j]=dp[i-1][j] 因为用t匹配s所以不需要考虑dp[i][j-1]
        #初始化： dp[0][j] = 0, dp[i][0] = 1, dp[0][0] = 1
        #从左到右，从上到下
        #打印dp数组

        dp = [[0] * (len(t)+1) for _ in range(len(s)+1)]
        for i in range(len(s)):
            dp[i][0] = 1

        for i in range(1,len(s)+1):
            for j in range(1,len(t)+1):
                if s[i-1] == t[j-1]:
                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j]

                else:
                    dp[i][j] = dp[i-1][j]

        return dp[-1][-1]
