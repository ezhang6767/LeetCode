738. 单调递增的数字
https://leetcode.cn/problems/monotone-increasing-digits/

class Solution:
    def checkNum(self, num):
        max_digit = 10  # 初始化一个最大数字为10，用于比较每一位数字是否递增
        while num:
            digit = num % 10  # 获取当前数字的最低位数字
            if max_digit >= digit:  # 检查最大数字是否大于等于当前位数字
                max_digit = digit  # 如果是，更新最大数字为当前位数字
            else:
                return False  # 如果最大数字小于当前位数字，则不满足递增条件，返回False
            num //= 10  # 去除最低位数字，继续检查下一位数字
        return True  # 如果所有位数字都满足递增条件，返回True

    def monotoneIncreasingDigits(self, N):
        for i in range(N, 0, -1):  # 从给定数字 N 开始递减遍历
            if self.checkNum(i):  # 调用上述函数检查数字是否递增
                return i  # 如果找到满足条件的最大数字，返回该数字
        return 0  # 如果没有找到满足条件的数字，返回0

# 创建 Solution 类的实例
solution = Solution()
# 调用 monotoneIncreasingDigits 方法，并传入参数 N
result = solution.monotoneIncreasingDigits(N)
# 打印结果
print(result)


738. 单调递增的数字
https://leetcode.cn/problems/monotone-increasing-digits/description/


#暴力

class Solution:
    def checkNum(self, num):
        max_digit = 10
        while num:
            digit = num % 10
            if max_digit >= digit:
                max_digit = digit
            else:
                return False
            num //= 10
        return True

    def monotoneIncreasingDigits(self, N):
        for i in range(N, 0, -1):
            if self.checkNum(i):
                return i
        return 0

#贪心（版本一）

class Solution:
    def monotoneIncreasingDigits(self, N: int) -> int:
        # 将整数转换为字符串
        strNum = str(N)
        # flag用来标记赋值9从哪里开始
        # 设置为字符串长度，为了防止第二个for循环在flag没有被赋值的情况下执行
        flag = len(strNum)
        
        # 从右往左遍历字符串
        for i in range(len(strNum) - 1, 0, -1):
            # 如果当前字符比前一个字符小，说明需要修改前一个字符
            if strNum[i - 1] > strNum[i]:
                flag = i  # 更新flag的值，记录需要修改的位置
                # 将前一个字符减1，以保证递增性质
                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + strNum[i:]
        
        # 将flag位置及之后的字符都修改为9，以保证最大的递增数字
        for i in range(flag, len(strNum)):
            strNum = strNum[:i] + '9' + strNum[i + 1:]
        
        # 将最终的字符串转换回整数并返回
        return int(strNum)

#贪心（版本二）

class Solution:
    def monotoneIncreasingDigits(self, N: int) -> int:
        # 将整数转换为列表（字符串）
        strNum = list(str(N))

        # 从右往左遍历字符串
        for i in range(len(strNum) - 1, 0, -1):
            # 如果当前字符比前一个字符小，说明需要修改前一个字符
            if strNum[i - 1] > strNum[i]:
                strNum[i - 1] = str(int(strNum[i - 1]) - 1)  # 将前一个字符减1
                # 将修改位置后面的字符都设置为9，因为修改前一个字符可能破坏了递增性质
                for j in range(i, len(strNum)):
                    strNum[j] = '9'

        # 将列表转换为字符串，并将字符串转换为整数并返回
        return int(''.join(strNum))


#心（版本三）

class Solution:
    def monotoneIncreasingDigits(self, N: int) -> int:
        # 将整数转换为列表（字符串）
        strNum = list(str(N))

        # 从右往左遍历字符串
        for i in range(len(strNum) - 1, 0, -1):
            # 如果当前字符比前一个字符小，说明需要修改前一个字符
            if strNum[i - 1] > strNum[i]:
                strNum[i - 1] = str(int(strNum[i - 1]) - 1)  # 将前一个字符减1
                # 将修改位置后面的字符都设置为9，因为修改前一个字符可能破坏了递增性质
                strNum[i:] = '9' * (len(strNum) - i)

        # 将列表转换为字符串，并将字符串转换为整数并返回
        return int(''.join(strNum))

#贪心（版本四）精简

class Solution:
    def monotoneIncreasingDigits(self, N: int) -> int:
        strNum = str(N)        
        for i in range(len(strNum) - 1, 0, -1):
            # 如果当前字符比前一个字符小，说明需要修改前一个字符
            if strNum[i - 1] > strNum[i]:
                # 将前一个字符减1，以保证递增性质
                # 使用字符串切片操作将修改后的前面部分与后面部分进行拼接
                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + '9' * (len(strNum) - i)       
        return int(strNum)
