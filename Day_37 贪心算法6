738. 单调递增的数字
https://leetcode.cn/problems/monotone-increasing-digits/

class Solution:
    def checkNum(self, num):
        max_digit = 10  # 初始化一个最大数字为10，用于比较每一位数字是否递增
        while num:
            digit = num % 10  # 获取当前数字的最低位数字
            if max_digit >= digit:  # 检查最大数字是否大于等于当前位数字
                max_digit = digit  # 如果是，更新最大数字为当前位数字
            else:
                return False  # 如果最大数字小于当前位数字，则不满足递增条件，返回False
            num //= 10  # 去除最低位数字，继续检查下一位数字
        return True  # 如果所有位数字都满足递增条件，返回True

    def monotoneIncreasingDigits(self, N):
        for i in range(N, 0, -1):  # 从给定数字 N 开始递减遍历
            if self.checkNum(i):  # 调用上述函数检查数字是否递增
                return i  # 如果找到满足条件的最大数字，返回该数字
        return 0  # 如果没有找到满足条件的数字，返回0

# 创建 Solution 类的实例
solution = Solution()
# 调用 monotoneIncreasingDigits 方法，并传入参数 N
result = solution.monotoneIncreasingDigits(N)
# 打印结果
print(result)


738. 单调递增的数字
https://leetcode.cn/problems/monotone-increasing-digits/description/


#暴力

class Solution:
    def checkNum(self, num):
        max_digit = 10
        while num:
            digit = num % 10
            if max_digit >= digit:
                max_digit = digit
            else:
                return False
            num //= 10
        return True

    def monotoneIncreasingDigits(self, N):
        for i in range(N, 0, -1):
            if self.checkNum(i):
                return i
        return 0

#贪心（版本一）

class Solution:
    def monotoneIncreasingDigits(self, N: int) -> int:
        # 将整数转换为字符串
        strNum = str(N)
        # flag用来标记赋值9从哪里开始
        # 设置为字符串长度，为了防止第二个for循环在flag没有被赋值的情况下执行
        flag = len(strNum)
        
        # 从右往左遍历字符串
        for i in range(len(strNum) - 1, 0, -1):
            # 如果当前字符比前一个字符小，说明需要修改前一个字符
            if strNum[i - 1] > strNum[i]:
                flag = i  # 更新flag的值，记录需要修改的位置
                # 将前一个字符减1，以保证递增性质
                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + strNum[i:]
        
        # 将flag位置及之后的字符都修改为9，以保证最大的递增数字
        for i in range(flag, len(strNum)):
            strNum = strNum[:i] + '9' + strNum[i + 1:]
        
        # 将最终的字符串转换回整数并返回
        return int(strNum)

#贪心（版本二）

class Solution:
    def monotoneIncreasingDigits(self, N: int) -> int:
        # 将整数转换为列表（字符串）
        strNum = list(str(N))

        # 从右往左遍历字符串
        for i in range(len(strNum) - 1, 0, -1):
            # 如果当前字符比前一个字符小，说明需要修改前一个字符
            if strNum[i - 1] > strNum[i]:
                strNum[i - 1] = str(int(strNum[i - 1]) - 1)  # 将前一个字符减1
                # 将修改位置后面的字符都设置为9，因为修改前一个字符可能破坏了递增性质
                for j in range(i, len(strNum)):
                    strNum[j] = '9'

        # 将列表转换为字符串，并将字符串转换为整数并返回
        return int(''.join(strNum))


#心（版本三）

class Solution:
    def monotoneIncreasingDigits(self, N: int) -> int:
        # 将整数转换为列表（字符串）
        strNum = list(str(N))

        # 从右往左遍历字符串
        for i in range(len(strNum) - 1, 0, -1):
            # 如果当前字符比前一个字符小，说明需要修改前一个字符
            if strNum[i - 1] > strNum[i]:
                strNum[i - 1] = str(int(strNum[i - 1]) - 1)  # 将前一个字符减1
                # 将修改位置后面的字符都设置为9，因为修改前一个字符可能破坏了递增性质
                strNum[i:] = '9' * (len(strNum) - i)

        # 将列表转换为字符串，并将字符串转换为整数并返回
        return int(''.join(strNum))

#贪心（版本四）精简

class Solution:
    def monotoneIncreasingDigits(self, N: int) -> int:
        strNum = str(N)        
        for i in range(len(strNum) - 1, 0, -1):
            # 如果当前字符比前一个字符小，说明需要修改前一个字符
            if strNum[i - 1] > strNum[i]:
                # 将前一个字符减1，以保证递增性质
                # 使用字符串切片操作将修改后的前面部分与后面部分进行拼接
                strNum = strNum[:i - 1] + str(int(strNum[i - 1]) - 1) + '9' * (len(strNum) - i)       
        return int(strNum)

968. 监控二叉树

https://leetcode.cn/problems/binary-tree-cameras/

#贪心+二叉树
class Solution:
         # Greedy Algo:
        # 从下往上安装摄像头：跳过leaves这样安装数量最少，局部最优 -> 全局最优
        # 先给leaves的父节点安装，然后每隔两层节点安装一个摄像头，直到Head
        # 0: 该节点未覆盖
        # 1: 该节点有摄像头
        # 2: 该节点有覆盖
    def minCameraCover(self, root: TreeNode) -> int:
        # 定义递归函数
        result = [0]  # 用于记录摄像头的安装数量
        if self.traversal(root, result) == 0:
            result[0] += 1

        return result[0]

        
    def traversal(self, cur: TreeNode, result: List[int]) -> int:
        if not cur:
            return 2

        left = self.traversal(cur.left, result)
        right = self.traversal(cur.right, result)

        # 情况1: 左右节点都有覆盖
        if left == 2 and right == 2:
            return 0

        # 情况2:
        # left == 0 && right == 0 左右节点无覆盖
        # left == 1 && right == 0 左节点有摄像头，右节点无覆盖
        # left == 0 && right == 1 左节点无覆盖，右节点有摄像头
        # left == 0 && right == 2 左节点无覆盖，右节点覆盖
        # left == 2 && right == 0 左节点覆盖，右节点无覆盖
        if left == 0 or right == 0:
            result[0] += 1
            return 1

        # 情况3:
        # left == 1 && right == 2 左节点有摄像头，右节点有覆盖
        # left == 2 && right == 1 左节点有覆盖，右节点有摄像头
        # left == 1 && right == 1 左右节点都有摄像头
        if left == 1 or right == 1:
            return 2

#Q:为什么使用使用列表来传递 result?
#A:这涉及到Python中参数传递的方式，以及不可变对象和可变对象的概念。

在Python中，函数的参数传递有两种方式：值传递（传递的是对象的引用副本）和引用传递。
对于不可变对象（如int、str等），函数内部对参数的修改不会影响外部的变量值。
但对于可变对象（如列表、字典等），函数内部的修改会影响外部变量的值。

在你的情况下，需要在递归调用过程中跟踪一个值，以便在不同的递归层级中进行累加。
如果直接传递一个int作为参数，由于int是不可变的，每次递归调用都会创建一个新的int对象，
而不会在原来的int对象上进行修改。因此，你选择使用一个列表来传递可变对象，
以便在递归调用中修改列表内部的值，从而在不同递归层级中保持累加结果。

这种方法在Python中经常被用来在递归过程中保持可变对象的状态，
因为列表、字典等可变对象可以在函数内部进行修改，而不会影响到新的对象创建。





#result的不同定义写法：
class Solution:
    def minCameraCover(self, root: Optional[TreeNode]) -> int:
        self.result = 0
        if self.traversal(root) == 0:
            self.result += 1
        return self.result


    
    def traversal(self, cur: TreeNode) -> int:
        if not cur:
            return 2

        left = self.traversal(cur.left)
        right = self.traversal(cur.right)

        if left == 2 and right == 2:
            return 0

        if left == 0 or right == 0:
            self.result += 1
            return 1

        if left == 1 or right == 1:
            return 2

